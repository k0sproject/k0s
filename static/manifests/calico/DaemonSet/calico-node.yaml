---
# Source: https://github.com/projectcalico/calico/blob/v3.29.6/charts/calico/templates/calico-node.yaml
# This manifest installs the calico-node container, as well
# as the CNI plugins and network config on
# each master and worker node in a Kubernetes cluster.
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: calico-node
  namespace: kube-system
  labels:
    k8s-app: calico-node
spec:
  selector:
    matchLabels:
      k8s-app: calico-node
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      labels:
        k8s-app: calico-node
      {{/* Add annotations for metrics-scraper. */ -}}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9091'
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      hostNetwork: true
      tolerations:
        # Make sure calico-node gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Mark the pod as a critical add-on for rescheduling.
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoExecute
          operator: Exists
      serviceAccountName: calico-node
      # Minimize downtime during a rolling upgrade or deletion; tell Kubernetes to do a "force
      # deletion": https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods.
      terminationGracePeriodSeconds: 0
      priorityClassName: system-node-critical
      initContainers:
        # This container installs the CNI binaries
        # and CNI network config file on each node.
        - name: install-cni
          image: "{{ .CalicoCNIImage }}"
          imagePullPolicy: {{ .PullPolicy }}
          command: ["/opt/cni/bin/install"]
          {{/* K0s doesn't support eBPF mode for Calico.
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          */ -}}
          env:
            # Name of the CNI config file to create.
            - name: CNI_CONF_NAME
              value: "10-calico.conflist"
            # The CNI network config to install on each node.
            - name: CNI_NETWORK_CONFIG
              {{/* Inline the configuration to trigger rolling updates. */ -}}
              value: |
                {
                  "name": "k8s-pod-network",
                  "cniVersion": "0.3.1",
                  "plugins": [
                    {
                      "type": "calico",
                      "log_level": "info",
                      "log_file_path": "__LOG_FILE_PATH__",
                      "datastore_type": "kubernetes",
                      "nodename": "__KUBERNETES_NODE_NAME__",
                      "mtu": {{ .MTU }},
                      "ipam": {
                          "type": "calico-ipam",
                          {{/* K0s needs to override these for IPv6 support. */ -}}
                          "assign_ipv4": "{{ .EnableIPv4 }}",
                          "assign_ipv6": "{{ .EnableIPv6 }}"
                      },
                      "policy": {
                          "type": "k8s"
                      },
                      "kubernetes": {
                          "kubeconfig": "__KUBECONFIG_FILEPATH__"
                      }
                    },
                    {
                      "type": "portmap",
                      "snat": true,
                      "capabilities": {"portMappings": true}
                    },
                    {
                      {{/*
                        For some reason, this plugin is not included in the
                        default configuration of the cni-plugin install
                        executable.
                      */ -}}
                      "type": "bandwidth",
                      "capabilities": {"bandwidth": true}
                    }
                  ]
                }
            # Set the hostname based on the k8s node name.
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            {{/* K0s is templating the MTU directly into the configuration.
            # CNI MTU Config variable
            - name: CNI_MTU
              valueFrom:
                configMapKeyRef:
                  name: calico-config
                  key: veth_mtu
            */ -}}
            # Prevents the container from sleeping forever.
            - name: SLEEP
              value: "false"
          volumeMounts:
            - mountPath: /host/opt/cni/bin
              name: cni-bin-dir
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
          securityContext:
            privileged: true
        {{- /* K0s doesn't support eBPF mode for Calico.
        # This init container mounts the necessary filesystems needed by the BPF data plane
        # i.e. bpf at /sys/fs/bpf and cgroup2 at /run/calico/cgroup. Calico-node initialisation is executed
        # in best effort fashion, i.e. no failure for errors, to not disrupt pod creation in iptable mode.
        - name: "mount-bpffs"
          image: docker.io/calico/node:v3.30.3
          imagePullPolicy: IfNotPresent
          command: ["calico-node", "-init", "-best-effort"]
          volumeMounts:
            - mountPath: /sys/fs
              name: sys-fs
              # Bidirectional is required to ensure that the new mount we make at /sys/fs/bpf propagates to the host
              # so that it outlives the init container.
              mountPropagation: Bidirectional
            - mountPath: /var/run/calico
              name: var-run-calico
              # Bidirectional is required to ensure that the new mount we make at /run/calico/cgroup propagates to the host
              # so that it outlives the init container.
              mountPropagation: Bidirectional
            # Mount /proc/ from host which usually is an init program at /nodeproc. It's needed by mountns binary,
            # executed by calico-node, to mount root cgroup2 fs at /run/calico/cgroup to attach CTLB programs correctly.
            - mountPath: /nodeproc
              name: nodeproc
              readOnly: true
          securityContext:
            privileged: true
        */}}
      containers:
        # Runs calico-node container on each Kubernetes node. This
        # container programs network policy and routes on each
        # host.
        - name: calico-node
          image: "{{ .CalicoNodeImage }}"
          imagePullPolicy: {{ .PullPolicy }}
          envFrom:
          - configMapRef:
              # Allow KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT to be overridden for eBPF mode.
              name: kubernetes-services-endpoint
              optional: true
          env:
            # Use Kubernetes API as the backing datastore.
            - name: DATASTORE_TYPE
              value: "kubernetes"
            # Wait for the datastore.
            - name: WAIT_FOR_DATASTORE
              value: "true"
            # Set based on the k8s node name.
            - name: NODENAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Choose the backend to use.
            - name: CALICO_NETWORKING_BACKEND
              value: "{{ .Mode }}"
            # Cluster type to identify the deployment type
            - name: CLUSTER_TYPE
              value: "{{ if eq .Mode "bird" }}k8s,bgp{{ else }}k8s{{ end }}"
            # Auto-detect the BGP IP address.
            - name: IP
              {{/*
                The environment variable IP is only for IPv4. It's the IPv4
                equivalent of the env IP6, but the default behavior is
                different. Single stack IPv6 clusters require it to be none,
                clusters with IPv4, single or dual stack, must set it to
                autodetect.
              */ -}}
              value: "{{ if .EnableIPv4 }}autodetect{{ else }}none{{ end }}"
            # Auto detect the iptables backend
            - name: FELIX_IPTABLESBACKEND
              value: "auto"
            {{- if ne .IPAutodetectionMethod "" }}
            - name: IP_AUTODETECTION_METHOD
              value: {{ .IPAutodetectionMethod }}
            {{- end }}
            {{- if ne .IPV6AutodetectionMethod "" }}
            - name: IP6_AUTODETECTION_METHOD
              value: {{ .IPV6AutodetectionMethod }}
            {{- end }}
            # Enable IPIP
            - name: CALICO_IPV4POOL_IPIP
              value: "{{ if eq .Mode "bird" }}{{ .Overlay }}{{ else }}Never{{ end }}"
            # Enable or Disable VXLAN on the default IP pool.
            - name: CALICO_IPV4POOL_VXLAN
              value: "{{ if and (eq .Mode "vxlan") .EnableIPv4 }}{{ .Overlay }}{{ else }}Never{{ end }}"
            # Enable or Disable VXLAN on the default IPv6 IP pool.
            - name: CALICO_IPV6POOL_VXLAN
              value: "{{ if and (eq .Mode "vxlan") .EnableIPv6 }}{{ .Overlay }}{{ else }}Never{{ end }}"
            {{- if eq .Mode "vxlan" }}
            - name: FELIX_VXLANPORT
              value: "{{ .VxlanPort }}"
            - name: FELIX_VXLANVNI
              value: "{{ .VxlanVNI }}"
            {{- end }}
            {{- if .EnableWireguard }}
            - name: FELIX_WIREGUARDENABLED
              value: "true"
            {{- end }}
            # Set MTU for tunnel device used if ipip is enabled
            - name: FELIX_IPINIPMTU
              value: "{{ .MTU }}"
            # Set MTU for the VXLAN tunnel device.
            - name: FELIX_VXLANMTU
              value: "{{ .MTU }}"
            # Set MTU for the Wireguard tunnel device.
            - name: FELIX_WIREGUARDMTU
              value: "{{ .MTU }}"
            {{- if .EnableIPv4 }}
            # The default IPv4 pool to create on startup if none exists. Pod IPs will be
            # chosen from this range. Changing this value after installation will have
            # no effect. This should fall within `--cluster-cidr`.
            - name: CALICO_IPV4POOL_CIDR
              value: "{{ .ClusterCIDRIPv4 }}"
            {{- end }}
            # Disable file logging so `kubectl logs` works.
            - name: CALICO_DISABLE_FILE_LOGGING
              value: "true"
            # Set Felix endpoint to host default action to ACCEPT.
            - name: FELIX_DEFAULTENDPOINTTOHOSTACTION
              value: "ACCEPT"
            {{- if .EnableIPv6 }}
            - name: CALICO_IPV6POOL_NAT_OUTGOING
              value: "true"
            - name: FELIX_IPV6SUPPORT
              value: "true"
            - name: IP6
              value: "autodetect"
            - name: CALICO_IPV6POOL_CIDR
              value: "{{ .ClusterCIDRIPv6 }}"
            {{- else }}
            # Disable IPv6 on Kubernetes.
            - name: FELIX_IPV6SUPPORT
              value: "false"
            {{- end }}
            # Set Felix logging to "info"
            - name: FELIX_LOGSEVERITYSCREEN
              value: "info"
            - name: FELIX_HEALTHENABLED
              value: "true"
            - name: FELIX_PROMETHEUSMETRICSENABLED
              value: "true"
            {{/* Disable VXLAN offloading */ -}}
            - name: FELIX_FEATUREDETECTOVERRIDE
              value: ChecksumOffloadBroken=true
            {{/*
              Setting custom environment variables.
              These variables could overwrite the ones specified above.
            */ -}}
            {{ range $name, $value := .EnvVars }}
            - name: {{ $name }}
              value: "{{ $value }}"
            {{- end }}
          securityContext:
            privileged: true
          resources:
            requests:
              cpu: 250m
          lifecycle:
            preStop:
              exec:
                command:
                - /usr/bin/calico-node
                - -shutdown
          livenessProbe:
            exec:
              command:
              - /usr/bin/calico-node
              - -felix-live
              {{- if eq .Mode "bird" }}
              - -bird-live
              {{- end }}
            periodSeconds: 10
            initialDelaySeconds: 10
            failureThreshold: 6
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
              - /usr/bin/calico-node
              - -felix-ready
              {{- if eq .Mode "bird" }}
              - -bird-ready
              {{- end }}
            periodSeconds: 10
            timeoutSeconds: 10
          volumeMounts:
            # For maintaining CNI plugin API credentials.
            - mountPath: /host/etc/cni/net.d
              name: cni-net-dir
              readOnly: false
            - mountPath: /lib/modules
              name: lib-modules
              readOnly: true
            - mountPath: /run/xtables.lock
              name: xtables-lock
              readOnly: false
            - mountPath: /var/run/calico
              name: var-run-calico
              readOnly: false
            - mountPath: /var/lib/calico
              name: var-lib-calico
              readOnly: false
            - name: policysync
              mountPath: /var/run/nodeagent
            {{/* K0s doesn't support eBPF mode for Calico.
            # For eBPF mode, we need to be able to mount the BPF filesystem at /sys/fs/bpf so we mount in the
            # parent directory.
            - name: bpffs
              mountPath: /sys/fs/bpf
            */ -}}
            - name: cni-log-dir
              mountPath: /var/log/calico/cni
              readOnly: true
      volumes:
        # Used by calico-node.
        - name: lib-modules
          hostPath:
            path: /lib/modules
        - name: var-run-calico
          hostPath:
            path: /var/run/calico
            type: DirectoryOrCreate
        - name: var-lib-calico
          hostPath:
            path: /var/lib/calico
            type: DirectoryOrCreate
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          {{/* K0s doesn't support eBPF mode for Calico.
        - name: sys-fs
          hostPath:
            path: /sys/fs/
            type: DirectoryOrCreate
        - name: bpffs
          hostPath:
            path: /sys/fs/bpf
            type: Directory
        # mount /proc at /nodeproc to be used by mount-bpffs initContainer to mount root cgroup2 fs.
        - name: nodeproc
          hostPath:
            path: /proc
          */ -}}
        # Used to install CNI.
        - name: cni-bin-dir
          hostPath:
            path: /opt/cni/bin
            type: DirectoryOrCreate
        - name: cni-net-dir
          hostPath:
            path: /etc/cni/net.d
        # Used to access CNI logs.
        - name: cni-log-dir
          hostPath:
            path: /var/log/calico/cni
        # Used to create per-pod Unix Domain Sockets
        - name: policysync
          hostPath:
            type: DirectoryOrCreate
            path: /var/run/nodeagent
