/*
Copyright 2022 k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package privateregistry

import (
	"bytes"
	"context"
	"encoding/base64"
	"fmt"
	"path"
	"testing"
	"text/template"

	"github.com/avast/retry-go"
	"github.com/k0sproject/k0s/inttest/common"
	"github.com/stretchr/testify/suite"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const k0sConfig = `
spec:
  runtime:
    registries:
      - name: "registry1:443"
        capabilities:
          - "pull"
          - "resolve"
        server: "https://registry1"
        ca: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUpLVENDQlJHZ0F3SUJBZ0lVREZGMS9YbjZ5MzhjdEc4czVqOGFBdG1mTTNJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmxaMmx6ZEhKNUxXTnNhV1Z1ZEMxallUQWVGdzB5TWpBeQpNRGt3T0RRNU5UUmFGdzB5TXpBeU1Ea3dPRFE1TlRSYU1DUXhJakFnQmdOVkJBTU1HV1J2WTJ0bGNpMXlaV2RwCmMzUnllUzFqYkdsbGJuUXRZMkV3Z2dRaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJRUR3QXdnZ1FLQW9JRUFRRHAKZ05oYmcvZis3RUh5VEhqbXpyZ1VMdHlMeWNHajhIaTJubjljZ0k2YWJWS0tHVkcxOXdZYnVkcUJLRUpYRks4egpXNUJ5cXRTcGNXdWxjNVhnamQwREo1cDZFK0xIVno0Z0JhRnpmVkdLTmNWY04xREhUcXlMdW90cEZxMGVlTjBzCktxc0EyWTdpaFRtbjVMM0lqbUI3NXp2SjB1L1FnNU1MZE1WZlFDOVh4QlJPcmx4MWtDWjlYcDMwOTRCVjBYMTcKUmhZK2tTS25xNkxBdG1UYU4wTzNCRHVFWXR4dTllRWJ5UVVHcS9pbk13M1N2c0NIN0NxSTJCaUZ2d3dkNjNyagpGWU5pUEEzWk1jYTlERy9lN3hLZWU3TGNhSEZ6M29Sa2F4RnJyc1RLMU9ZSDNVWjl0djVvbDEwQ0hzK1dPeGs4ClFPQTd0eHNTV3FpZWNHWHB5YXZFVXFtb3BLQnhxMngxUFFBa08yQUNQa2prTmlaSDNRTGpUdWEwRTNwZnhES3oKbTFxNldVYXZyV3ZzOVNqeW1QZ00wcE9ES3VWdGJFMHo0RnRVM3EwRnlYWEpuclc0cko3MDMrMTBaVGpsUWtKRgoxTTZDeHZjaXVLcjdITGpTa05nKy9aa3dHcFFOZXFiQ1E1Q2NaZ1lNdXlkM015MHU5VFhIU09STUw0VVYvSUxnCi9aUDVYcHVBUmtXaitNZFNtSUFDdzE5U3kvOGxPTURwQzF2Z1V1cUJ5MVl1N3l3K0xDTkJxKzhBVUh5VXRjd28KRHNvdW1ia3JmNldxY2FXMEFOSHNDemxNOEthb203aE56cVZnRiswa0FhUC8zRHI5cjFYbEdDVmpyZVY2UjFJdQphUG5SSFpZaWFXaHJ3WFpqZ0Y4UVp4ajdhM3FmRTRmVkhiMkdnYnVwZDA3eEExNW0vaEl1RDJieTd4ckttZ3BNCndvUWF1VEtEKzBIZHFVd1h3cVYwMGo0K0QzNkhZZjhESHllZVFGQlpZNmQ3YktIN3NFVFlvQ05ScUpoYUhSelIKaHY3cUlTOERiNTUyQTFpbmhaWTVUOXM2SzlyL2xyd3pWT0k0S0NyUGdQbVVWbWtCRWl5SkRqM28xK3dVc0lLNApNeXVjUlF4aWJjVWlzSlNXVkdMK2ZvU1MxZUx1azQyN0JiYWNaWkRwcVkwTWJrR3dLQUhIdEgvZXhXV3N5TEtWClRRbkVKNU5PeWdJaStpTFVGMHNIR1VJeklmYTdWZHRFWVJHY0phSTg1U0pLd01BdU4xV3R2MzlRWmVnNXVNdEgKbTFIOUZHOGtOemk3SUU1aDNhSCtKSEhRMjJuUTFwb0tobmM1Z3Q3UXhrdWE0RXk4d2FGbnZuaU5hc2ZpdFJIMApObnlOQlZVdDllZTd6NUpRU3hXM09RNkIzZS9jK1dMSE5nMlJXYi9VT1JWZzFRTzVueEQzTlU3M0YveGFHVFltCnRLLy9PK0ZxaENVRnQwQXlEUk15QUhTdVhKR2NFWjB3bXNQRUxBTEFQenlWS1Vqb1VUYXFid0ZBOU9zT3dDR2gKSSt2S3JnRDRqY041a1hZdFEvUDlNenpPbEpwbmNLVDJNdDNxS0JsclZqTGdJVW13Q1V4RGk4SWRzREJpeEVGdQpXQkthQWI1QW9uM0J3RzNsTVdmQXdvZGJ1MUpLeko1dEtaQmVONUJ3WTlTekthNWI4djE0bkRJbnU1Nkx0dFBQCjJoQlQvQW9sMGRPcmVvK3lCMndzSTBjOWdiR3RLQmZjeVQ2YlRQOGRSSDNMOXlzOGRYdlFkZU9FOUNHR0FBbnIKMTlPWXVTcEdXdmNvYnhnQjVnbkpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNBN3VsRE5CcmR3aUd3aGtPTQprZ0dLQkFNay9EQWZCZ05WSFNNRUdEQVdnQlNBN3VsRE5CcmR3aUd3aGtPTWtnR0tCQU1rL0RBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJRUFRQ0xYRWRuQThJYVVGV1M2RUVkZnJvaytWSkwKZVVhaCtJSHpEcElsWjBITkJuaERiQ3M3ZTI3bC9SUm82aG40cGJEc0ZwSHk5WTArajJZSDBnOVBGbERuRDVDZgpvUGhEcFM5VkJqUzZUMjZrUFdEeFdaMHA0am9sMzZKYjZrcnU3Vy9qd2d1Q3hGczIwRlhWWFphSkU1UkVjOXNXCjhOeXBtMi9XcDJUaVVxMmN1UjFHaDZUQzYzbEZTZHhuZGRlaVZZYi80eVFMK1RZY0RyK2lxWWtoaWlibVRyWEkKWU9nVlVqbHhVdTdaQktyTjkvMzhMbnBKZDUwWTV0UkYxWDVGNGwxL1N3ck53bkZwOThWL25qVUhxU0M3SzA3bApJMmhRTTZCR1dCUm94S1ZyWmdhUThjTXNEQjg2QytEV0JYYWJZNHY5bmVOQ2xDQU5YcjlYb2QrYmlLM3oyWnNmCm5LalJjLzRQQm8vc1Q0SXM2U01CZGViTnhJbFZXMzRyUm1QWHd5QW5oSHRucHlYK3l2aldTb2FjVFpQTEJmd0gKUGp3elpYdi9zOXpYZENXbXVHaFRKVXBwaWxra1d1VkRrMEoraWo1Vnp5YzZnSnN4Q29Kc1h4dmpoRXJtaVRUeQpZdWw4WXNzdG5JQzg4dDB0aE5GNHlXaElQNjVEQXEwb1Mwbkh3S1RsS1BCSFZmZEhybFM2SVRaZzJ1ZVROV0RVCjgxL3BVVkV1U0xPeWZ4NklPcnVUb1dTMnppQVgzTlUrTUhPT3FYbEx2ekJGR1VKMytsc1pScVlCNnhiUFU3Q3MKVERCUUxOWXhzREYxYlJ0T1U1MU1VUnl4QkR5MENSQUZ3NzlQeUFlT3gzRDlVaXVpclRYcE9XQ2Q4YmhMZjBSMApia3krSDZjTDkwRmh0NWVHRHZPTmUvbC8zNlM0RndTREpndmVoQzFabFFDM2VaVmRuUTFSa2RDWXZVQy9MMVFjClNKU3ByM0FIYyt5d2JySWZPcVRrUEY5L2MxOXFFSlFwSnNsZldMRThYbFlxYXRueThBR2U1eS8vdlIralY2WFEKNEhPdHNsc3F5eEdSR3daSGkyK1YzRDFtVFRzQU4raGtOcWxzU3R6VGFBSmVLbGwzenJvNGlhUENKKzh4bHlqWApEZSt1ZWk3THBPa281cU1vb0N6TENUSWlVN3FtODgvY05XYWtTL1ZVOUJLSUZsSnFqM2ZBSlRtSHhDUnBKU2c5CkltTHZCbjllSnZISmFUR1B2TWpvVENrV0YrTVlVdjVTTXlEbHhiQkN1ZUhORUxldzl2QVpXSXRyMnlabFNDNGIKaUllaFZ2V3EwZk50YldNNnAwQytVejkvL2ozU21QUmpQeHlvTEhHNjRjVXRTQWNRYlJRaWFqdElSa3hIV0FORApYa2NjblhaeFRzZHhETDRkRTVnVzRBckNsUmFFQ3d0NFhBQnhPeStuRk05QXFNemNnWUt5cEcxZ2h1ZWIya0dMClJ6ZENyMlN0UEZMRUhiYUxDUmVRS09XV2JYZTBsb2s4UWZOQVo2c1BZYTZ6cjQ3ZU4yQnRYZ2wwVkRmV2V2aFkKR3MrOXNpTDJqdng3TEt1SU9WYWZRQWlPMlVNKytVZHBsYUZUWVgwb3dNb0N5U3NZWUUveis4ZzZPdlFLOG9aNApUUU54RDBxd1RFL3hZeStkaytiSG4xT3M2YnRoVmszMk9HU2ttMmNBWm1wM0M4SU9nYlpmREtCUldQbU5QaXBnCmZNRWdvWTZNSHFsSnFOcFBBS1ZtTnFBKzdnVGpVaDlORUkyUnVDcnppTkRJZDhHSzhrd3huSTRoSm1ROQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
        client: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNVENDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBS251eWlCbUVQK2xvRDM2OTg2ZTFLTnZ6bUZLejgrenVCRWoKN3orOUcvUXJqRFhybDNMaStjbE0zZGFCemNKRmIrMHZKYnY0ODdxVWc4a2tIalozdlk1aDRTU3lQZnlrK0R0cQpDNTZKWW5oTHVXT0h1cVlNN2I3OVkxYTRMSjErb3ZpS1d4ZUZWdVJhbmFHQkZNaC9kakRCbzd6cm1uRFAxYUJTCnk3b091VWE4ZnV1YmhtV212UTBSTllRcHA2SFZnekcrU1dpN2ZSRzY5OU0wTUVKeHVWQTd5ZEdaYVFJL1NMQjMKNk1wOXJUM1poaXN3b3NMSGZMcU8rSEduQ3R6YXdEcXhtWG5KSEZqRTJOQk5yZmJYZHQwaEwvcFFWSFpUY1FkKwora1M5aFZtazV2WkxUd2RLNXlnRHU4d0pGNE5QcUlCU3had3oyOTR0TmVicFB2RWFOaGo3SjcxZGs5Y0VBalBJCjdxTjdQbjlGbGh2eHFpMVFYNFdsdEx5MUd4K1duTnNpSWRyeWFZR1pnTHJqbEs4Vk93MmtqbzZPUkwzQ1BIc2MKUTFSZ21RMVl1TFZ0MjZ3M2ZNMDRJMDUwWG5wSXVGSG05S2VrQStpNjdXNXRKbExuSUlQWmw1dDNkWnhnWFlsTgpOTzRkUXRHMTdoSklQMVdNSzdDcTdva2E0Q21rMjRQVVVaT0VyUVRVM09RS2dGS2xwdEFmVk1UODczTVVQR2tVCnA5NVc4cmtSaDdydXErRy9peHB2Um1ZUW54TXJvOWcydzFhZlFOSUMyUzJQR0R5Y1ZXV1dkVmp1QStEZ2dWVlMKY2tuWmtDQjdKY2hmVW1CMjJHYVZHb1NoWFN4ek81eEtxdENBdWh1Z2JDNDIrOCtVSmY4d2VnS3J6QjZUN1FDSApVbzN3Z0YvOUFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU0zeWRpMGFKbHFpS0hlWjQwLzlZVjN6CjE4L2QxazhoaW1KT0Nzak05MXIzZVVHS3Jyb3U4Y3BFUXlzQy9GbVI5anpWN0dPUmlUREpvUERybmgvV0RzRTYKSmtDRGJObHB4bjlOK2phSTl4YnR4Yks3MmJmbXR0WVk1dkNOTHR1bHNhdUc0Y3YvT2FrNGNKdnY1L1NaTmZFNgphTzNnOVg1UHc5MGdFT3NIS3VUZlk4ODR6NjRpQ3FyRGNDS3Q3cE1WNDBkSkwrb2hwRFFvR3dGRE90bERSa2lNCkNBQUpIbU5ZVlQxRnJMTFNHdStwQWdNbWpTbnNyUGNPNHowcEFZUjRRcGRzclQwa2l4K0t1bUlrWGJsWm9MTm4KcCt1UlF5MW92YWVsNkRlVzdvZlBMQy9sQU9pUkdIdkRyZnBaZlMvVkFCNEdCUytlYXkrU2JNSEcvWmdDbk5pTQpELzFmTlhtdGJZNXpjQ3NESTZ3TWNwRnZSSE5qSEZrNEI0cjdBYUpmQ3pka2Jlbk9SZEV0eFEwL2kwbXMxWktRClJhcGtESXNjTmpBczJsaElmSjZyQWZQN2x6SFBjeGNydk1LYnEzQTBoVThpRi92ZUVoS2MxZGlnU2ljZlhIdTAKcFl0T0RVZTVTZEF1V3dUNk00dDRvZjNLMWZxajRsVzNjUlpJRGFnRC9OUWtCUnFaSkZIT3ZvbWhmZklmbS9QVgowd3E1cEVFTlFaUytSVkJ6dmxrWUxWNHJ3Y0VvN1gwU2RpeVdNbmxRTVpXL1JyKzVKN1orV2kvOCtOYk5uK1FzCk1PMHNyN2gyd2QrRFJiL2RxSmxJcWJHMkFHU2lrYmZIVWJQL0d1WTd5UVJpV2ExL29rbGZnREV2QjJ3OGpXek8KVnEva09lTjZocmRDdCtLaExRbXVLZnZtZm1iRnYzWnc2NXIrbU1YTk50NWQwQU04RE5XdTQ2L3dkRkZ1Nk8rUQpXZ1NxZGNvMnJpTXRJYmxpUngrdnE0N21XNkNmaGZrbmVScWtoTEhKQzBrd0FkUTlMRWxGa1ROR0l4M01FblFuClN6dUg4Mms3V3U0elllbGFUMWVNK0w0UHZoTW1xc0IxdHVIYmhaaWJkazBDTVdDcVptNmdFaitaQ3hlK3hYQ3EKMTlYN3J3UmkvalQxYWZaV2llRFN0aU0vQ1ZXNEZZbnYvcEVlTjJ5TVZTaGgxN2ZwazFNWWRVcHU2N2dTK1gyWQozY1pOYVN0b0tpeG0rRE5QTGdCcXdqdGdoeThkOU9TK3UzVGV0TzZlMHFjckYyU09tMy9XcU4rS1JWNGVkOWxiCnR0b0ZwRzF0YnkxaHlYc241TG9Ca0hMUW45MUtOYXo5KzFVdmRGcFFaQWZacGJWNUtUcmJFRE5rSlIzT085YXkKeWEyNDdpU3NnbzBXbGZMTkZUdjUzWWtHOUtvdGp4b1VxNVZ5U05pc1h6a05Ec1F0Mi90Nk94cjRyU3RoOGhaQwpmSkFnRnJtTlJ4WE8zelZOSEFKdktmTnpGNzltWVVFb21IVWhBcHgyU2puK0hUZHJkLy9hMDdVVS8rSFlONnpiCnI1RU5QZDFSSU5SS3pCcFl3azRQL3hiRzlES2VXbTZoVFA3RkxBVHJSYXVxTVdYK0pobTRGM21QMlN6cWl2NGoKQitRTyttTGd5UDVUaFVLeVdhMkZXakFrSzRIa3FhMGZDQnYycmdwc1QwV3I4Y1IvTDJrYjJiQ3lEL2lUdmU0KwozNWh4MHM4Z20wZ0E4eXFVSklYVEhoZW5Yd2hpdHhtOG9lSDFtVUJSd0g0MGMvamtkaWQvWmlXdXlxWlovS009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
        key: "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcWU3S0lHWVEvNldnUGZyM3pwN1VvMi9PWVVyUHo3TzRFU1B2UDcwYjlDdU1OZXVYCmN1TDV5VXpkMW9ITndrVnY3UzhsdS9qenVwU0R5U1FlTm5lOWptSGhKTEk5L0tUNE8yb0xub2xpZUV1NVk0ZTYKcGd6dHZ2MWpWcmdzblg2aStJcGJGNFZXNUZxZG9ZRVV5SDkyTU1HanZPdWFjTS9Wb0ZMTHVnNjVScngrNjV1RwpaYWE5RFJFMWhDbW5vZFdETWI1SmFMdDlFYnIzMHpRd1FuRzVVRHZKMFpscEFqOUlzSGZveW4ydFBkbUdLekNpCndzZDh1bzc0Y2FjSzNOckFPckdaZWNrY1dNVFkwRTJ0OXRkMjNTRXYrbEJVZGxOeEIzNzZSTDJGV2FUbTlrdFAKQjBybktBTzd6QWtYZzArb2dGTEZuRFBiM2kwMTV1ays4Um8yR1BzbnZWMlQxd1FDTThqdW8zcytmMFdXRy9HcQpMVkJmaGFXMHZMVWJINWFjMnlJaDJ2SnBnWm1BdXVPVXJ4VTdEYVNPam81RXZjSThleHhEVkdDWkRWaTR0VzNiCnJEZDh6VGdqVG5SZWVraTRVZWIwcDZRRDZMcnRibTBtVXVjZ2c5bVhtM2QxbkdCZGlVMDA3aDFDMGJYdUVrZy8KVll3cnNLcnVpUnJnS2FUYmc5UlJrNFN0Qk5UYzVBcUFVcVdtMEI5VXhQenZjeFE4YVJTbjNsYnl1UkdIdXU2cgo0YitMR205R1poQ2ZFeXVqMkRiRFZwOUEwZ0xaTFk4WVBKeFZaWloxV080RDRPQ0JWVkp5U2RtUUlIc2x5RjlTCllIYllacFVhaEtGZExITTduRXFxMElDNkc2QnNMamI3ejVRbC96QjZBcXZNSHBQdEFJZFNqZkNBWC8wQ0F3RUEKQVFLQ0FnQU1NYzJoZTVHV3R1MEQ1YUdvMnk4Sk4zbkk4NVJzSkVwK09HVHYzd05GaDJaOWJCV25NZkNZNklJMgo1WU85Z0R3aStqSXNCaFovZWk3bTNVZXB3dmdBWXJmRWFXSVhZa05LQ0RjalBscXBwVTE5ZmZ6Lzg0ZVFJQ0RqCjFUMm1ZN01RUU9WK2o1d0hzUlVFeFAyWDBjWEtnK3JiSU5FcGJWQzRPNWpSRmtObmR4bG9rUFdaRDlrYk9mUHMKTXcwTGlRWHNLT3Fkc0c2dU9ndVV4WGI5SGFvZHZ0eWh4TytMTUwxbnBJTTVITUcwNFlwR1NTdzA3Qm5nVFdnNAp4N0w0M0YzVkdHK2FGTHVMQnoxRDNYOHhhbzdtR1g2VzZQTFd0dkF5aUlNdk1hYURJMWxMcldYVGNTV2Jjb0VrCmlEWit2dFdwdDhia2liZ3FmbllTeHdRMFN4dzhtc0hzcVlIOTgzWE9Na1kva1BoZkFyZ3JOWUdKUHVGZnprOVgKNnFMZ2tYaCt0eGtEUDNuaWNjcURZQVVMdHBleWdQeU9NZmFia0dWTFhuS2Y2aE8vTVBQZy9ITzhPbHBGeTV3TwpiWDRXM29EODAzR0FzOGlvNGpUN3Q5YXdFU3lIUnFWV0hXNDdIdFVxZDVDQjRmbEo2QzN1dmw2YW5VdGZ4RTh1CkFLYTRNeFRnMm1VSDlJV2ZvZjFwWTh0L3ZKMmVKdVZkSW9rUmhCYkJwckMyQkJ5MjlTTTlXVjQrWk1vZWRndG0KTENEUHQ5YXgvdlRpTEpTUGdkRDVyZ0tyVU4rU095cURJaWhWTUNiZnpqVWxUT3AyVW9DcXpub01DTHo4ei94dgp6SWhYSk96YzNYb3Bvc05jZWloWlZhZjQ5M0ZrOS9BNm16ZDRNc3h4WlVNQ3BMd2lRUUtDQVFFQTBTcUNkam5ECjFKVHY3cUxUY3RFUWxGMnR1S3hEYzFVMy9icnFvbkpONllSaEdxRnRZTEE2a05YblA2TVdEcW1OTDVIQlRLUWYKMFc3bjdpUERCa3h0SHVsNnFMcENKSWFlcWRXS1dwZWl0M1RoL2prbXEyVm81ekUrbUhjTVQzb1hFS3VzMnNCWApnTFNIOXRweGZYY3NEU0h0MVRjc0FtL1ZNaVBjZkRwR3ZRN2Z0Nk9MUVRwTGVpdGRGdWZJZ0R5YjFrWEtkM1dSCmFRQ3dsMTVpWGlyRytsNFVWb2JrYmZxdktkdWVvbDRGbTgraTEyZmVYQ2hNV1VLQzN4Uko4bUZERGtmK2hWL1cKSm96WnBUaVZGMDhOQk5JK0x4M1l0THFKNEdkSDFJMEJDdXdyVUEyTTVFU3I3ZldDblh5WHpkOWhkZ2RKQkZBRgpUcnBTc1ovVE16SHRVUUtDQVFFQXovdHBNL1ZaS1hQUTFLcFJUTnFFa2MxNUVwTm1xQXI1UDByY0NRazFtTW5kClpHOG5ZTWZzbzBLaDIveTNlVHl3ZkFHVS81eEp1MmxnUHAzeE9lQWdLUmc2WHZsc1d3RVBleGpNNDVaZ2IxdjMKK0JDVFBzT1dKdXFmWDlrL3ZjYUVJSlNVWDlVeEFJVzNVcGxWUGlIOElPTFlZN2VhRHFraEFCMnJET1FBdnVwcgpicHU1UUNhUU9VVGJoNXN0akg0SDF2NGFRdktPdERNd1U4b0VjaUNyRUNGTHhEUUdyZWpjREZMNjEydVM0MXlTCnNLL3hkYnUxWVVaWnZ2Y3hWM0JZbVRxUWJMS3FhRTAyTnh1VHFQU2pmcWU3T1pOaE95emJFd1VDRVhJdVJ5ajMKNXBUU0h5ZEJ5QlZESkVrRjFpYVdRTGwxZXJ5R2N2RUZtTzJ2bURIczdRS0NBUUVBbHZveEt6Y3M1R0FSQTlaaAovQ2x0NXpuck1EYWZoVHRJN0F1a1cxZFlaNnNYRUVyZkVZQ0M5WktBbGMyWkdVSkhWOFBFbkJhSHBQdUJ5OEhpCmZzUmhxNE5wOXlwaW5jelI3OUxrUjluV0tNZmtiRVZDWlVzUXVuZ3dMNHNXeHJOZ3ZMYStVVE91dFljWjhSUGkKQVdjbzA5M2V0eDFZMWZWMUZQa1BxRmZFUWFqZjBNVHF1azFpdDY5ZlJTNU82a2xWVHdnWFNiMENGYUhhMVpmYQpOeEIzaWJhb3hZQWVtRWZ2Y2E1RnhmdEozeHF6OXZuUlpnSHNnaTFoRzdhZ1hhVFk2eEVLWmFrMGdhVC9ZS1FECjhjd3NvSU5GUVdzd3hkc3p0RmU0WUhMYkF0QlB2enZZcTlmcHBoeWxpQm1yMVgxYzh2MzFOWGl4TEErUHF3aXIKUVBQVDBRS0NBUUJIU1ZZSzBCcUtnYjdmVmExZUdUdjlPWjg1QmJyVytFUHNOTDFzZjNLV2R3SmlUVk1DOGlPaQo1ZERTdFRFeDVlSmI3ckxpVmZCVHcwK1F4dFFLMFU1VXA1QkNRMTJuWjVxbHg1OWFsbzFoUGZXbFdoRU9IejNWCkF2QXppeVEwNk5rYXpiSjVrbm9rUXJET0orNDJ5TEZCbUY4dzlwcGdVZ29VbnhhazZYVnorcWR1RndRTS8rckoKSmxmVWlCUzVwZTBML0xhRm9kdlYyZ0hEaG1lMXNvclBrWW9GcXd0ckNuaDU1T3REY1FTODExc1VJb294bjNBUQo4bXNLY0hIQ0ZhalloR0ZDVUk3bUJ5a0JCSHU5R25UN2tZUXp2TmREMENFYXlNbW5yeW83aThoRWlWZm9BNjJoClplQklqSnJxaHZsVEgvNHJYbmo2NXEvVGRneU1ydmdWQW9JQkFEQ0ZkeDh6aXZxL1ZINnJyOGFENVRQMUVucGMKVUo4cDlnbmtNdjRVS0lhbzhscFcvZGViN0s0dno2bkRXSEkySWZlOHZwWGY4bmxYMVd4bkdubzhXSVVDWng5MQoxREl2c0pXNjZnYnBYWWJWV2RJN3NFL0xNa0MxLy8vamMxd1RUOHhTVzV2c2tjZmdPN0JuSmZzaUh4aXBPRGJZCnhEL2pyRStrZ1pURkxjdExPMVQ1Zk52bWRsZlRJaU1pQ0dsOVRTUnp3TVgxb0JtZUNtU3Q5LzVwY1hjU2lnY0MKMFBtc1BPRFlJOGlRS1ZLc2lwTkRwVVlTSW0xZ3JiTW4vMENWVVYrTkdoSng2dTd2R0hDejl0NWVXdjJxa09oRwpnODZoS0QzRkh3dVpWU1laVmJGSTN6NnI3S2RKS2RmT3RlQ1lMK2doMStYcGM3WXNtQzFBay81UERyOD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
`

type PrivateRegistrySuite struct {
	common.FootlooseSuite
}

func (s *PrivateRegistrySuite) TestK0sWithPrivateRegistry() {
	s.T().Log("starting registry 1")

	s.installRegistry(0)

	s.T().Log("configuring k0s worker to resolve docker-registry hostname")
	k0sWorkerSSH, err := s.SSH(s.WorkerNode(0))
	s.Require().NoError(err)
	defer k0sWorkerSSH.Disconnect()

	// We store client certs at /etc/docker/certs.d in order to push the test image to the registry
	s.MakeDir(s.WorkerNode(0), "/etc/docker")
	s.MakeDir(s.WorkerNode(0), "/etc/docker/certs.d")
	s.MakeDir(s.WorkerNode(0), "/etc/docker/certs.d/registry1:443")
	s.writeDockerCerts(s.WorkerNode(0), "/etc/docker/certs.d/registry1:443", ClientCert1, ClientKey1, ClientCA)

	s.writeClientCerts(s.WorkerNode(0))

	// Install registry ca into alpine ca store
	s.installCert(k0sWorkerSSH, s.WorkerNode(0), RegistryCertCA)

	_, err = k0sWorkerSSH.ExecWithOutput(fmt.Sprintf("echo '%s registry1' >> /etc/hosts", s.GetExternalRegistryIPAddress(0)))
	s.Require().NoError(err)

	_, err = k0sWorkerSSH.ExecWithOutput(fmt.Sprintf("echo '%s registry2' >> /etc/hosts", s.GetExternalRegistryIPAddress(1)))
	s.Require().NoError(err)

	s.T().Log("starting k0s controller and worker")
	s.PutFile(s.ControllerNode(0), "/tmp/k0s.yaml", k0sConfig)
	s.Require().NoError(s.InitController(0, "--config=/tmp/k0s.yaml"))

	//s.Require().NoError(s.InitController(0))
	s.Require().NoError(s.RunWorkers())

	kc, err := s.KubeClient(s.ControllerNode(0))
	s.NoError(err)

	err = s.WaitForNodeReady(s.WorkerNode(0), kc)
	s.NoError(err)

	pods, err := kc.CoreV1().Pods("kube-system").List(context.TODO(), v1.ListOptions{
		Limit: 100,
	})
	s.NoError(err)

	podCount := len(pods.Items)
	s.T().Logf("found %d pods in kube-system", podCount)
	s.Greater(podCount, 0, "expecting to see few pods in kube-system namespace")

	// Upload test image to registry1
	s.pushTestImage(k0sWorkerSSH, "registry1")

	// Deploy test pod from uploaded registry1 image

	k0sControllerSSH, err := s.SSH(s.ControllerNode(0))
	s.Require().NoError(err)
	defer k0sControllerSSH.Disconnect()

	s.writePodTemplate(k0sControllerSSH, s.ControllerNode(0), "registry1:443/nginx:latest", "registry1")
	s.NoError(s.WaitForNodeReady(s.WorkerNode(0), kc))

	s.Require().NoError(common.WaitForPod(kc, "test-pod", "default"))
}

func (s *PrivateRegistrySuite) installRegistry(idx int) {
	err := retry.Do(func() error {
		ssh, err := s.SSH(s.PrivateRegistry(idx))
		if err != nil {
			return err
		}
		defer ssh.Disconnect()

		_, err = ssh.ExecWithOutput(
			"apk add nginx docker-registry apache2-utils")
		s.Require().NoError(err, "can't install docker-registry apache2-utils")

		s.MakeDir(s.PrivateRegistry(idx), "/var/lib/registry")
		s.MakeDir(s.PrivateRegistry(idx), "/opt/registry")
		s.writeRegistryCerts(idx, "/etc/nginx/conf.d", RegistryCert1, RegistryKey1, ClientCA)
		s.writeDockerRegistryConfig(idx, "/etc/docker-registry/config.yml")
		s.writeNginxConfig(idx, "/etc/nginx/nginx.conf.base64", "registry1", nginxConfigTemplate)

		err = retry.Do(func() error {
			_, err = ssh.ExecWithOutput(
				"base64 -d /etc/nginx/nginx.conf.base64 > /etc/nginx/nginx.conf")
			return err
		})

		err = retry.Do(func() error {
			_, err = ssh.ExecWithOutput(
				"htpasswd -Bbn testuser testpassword > /opt/registry/nginx.htpasswd")
			return err
		})

		err = retry.Do(func() error {
			_, err = ssh.ExecWithOutput(
				"/etc/init.d/nginx start")
			return err
		})
		s.Require().NoError(err, "can't start nginx")

		err = retry.Do(func() error {
			_, err = ssh.ExecWithOutput(
				"/etc/init.d/docker-registry start")
			return err
		})
		s.Require().NoError(err, "can't start docker-registry")
		s.writeClientCerts(s.PrivateRegistry(idx))

		return err
	})
	s.Require().NoError(err)
}

func (s *PrivateRegistrySuite) writeRegistryCerts(idx int, rootPath string, regCert string, regKey string, clientCA string) {
	cert, key, clientCA := s.decodeRegistryCerts(regCert, regKey, clientCA)
	s.PutFile(s.PrivateRegistry(idx), path.Join(rootPath, "cert.pem"), string(cert))
	s.PutFile(s.PrivateRegistry(idx), path.Join(rootPath, "key.pem"), string(key))
	s.PutFile(s.PrivateRegistry(idx), path.Join(rootPath, "client-ca.pem"), string(clientCA))
}

func (s *PrivateRegistrySuite) decodeRegistryCerts(regCert string, regKey string, clientCA string) (string, string, string) {
	_serverCert, err := base64.StdEncoding.DecodeString(regCert)
	s.Require().NoError(err, "can't decode registry cert")
	_serverKey, err := base64.StdEncoding.DecodeString(regKey)
	s.Require().NoError(err, "can't decode registry key")
	_clientCa, err := base64.StdEncoding.DecodeString(clientCA)
	s.Require().NoError(err, "can't decode client ca")
	return string(_serverCert), string(_serverKey), string(_clientCa)
}

func (s *PrivateRegistrySuite) writeDockerRegistryConfig(idx int, path string) {
	s.PutFile(s.PrivateRegistry(idx), path, registryConfig)
}

func (s *PrivateRegistrySuite) writeNginxConfig(idx int, path string, registryHostname string, configTemplate string) {
	data := struct {
		Hostname string
	}{
		Hostname: registryHostname,
	}
	content := bytes.NewBuffer([]byte{})
	s.Require().NoError(template.Must(template.New("nginx.conf").Parse(nginxConfigTemplate)).Execute(content, data))
	base64EncodedNginxConf := base64.StdEncoding.EncodeToString(content.Bytes())
	s.PutFile(s.PrivateRegistry(idx), path, base64EncodedNginxConf)
}

func (s *PrivateRegistrySuite) decodeDockerCerts(clientCert1 string, clientKey1 string, clientCA string) (string, string, string) {
	_clientCert1, err := base64.StdEncoding.DecodeString(clientCert1)
	s.Require().NoError(err, "can't decode registry clientCert1")
	_clientKey1, err := base64.StdEncoding.DecodeString(clientKey1)
	s.Require().NoError(err, "can't decode registry key")
	_clientCa, err := base64.StdEncoding.DecodeString(clientCA)
	s.Require().NoError(err, "can't decode client ca")
	return string(_clientCert1), string(_clientKey1), string(_clientCa)
}

func (s *PrivateRegistrySuite) writeDockerCerts(nodename string, rootPath string, ClientCert1 string, ClientKey1 string, clientCA string) {
	cert, key, clientCA := s.decodeDockerCerts(ClientCert1, ClientKey1, clientCA)
	s.PutFile(nodename, path.Join(rootPath, "client.cert"), string(cert))
	s.PutFile(nodename, path.Join(rootPath, "client.key"), string(key))
	s.PutFile(nodename, path.Join(rootPath, "ca.crt"), string(clientCA))
}

func (s *PrivateRegistrySuite) installCert(ssh *common.SSHConnection, nodename string, certBase64 string) {
	_cert, err := base64.StdEncoding.DecodeString(certBase64)
	s.Require().NoError(err, "can't decode cert")
	s.PutFile(nodename, "/tmp/cert.crt", string(_cert))
	err = retry.Do(func() error {
		_, err = ssh.ExecWithOutput(
			"cat /tmp/cert.crt >> /etc/ssl/certs/ca-certificates.crt")
		return err
	})
	s.Require().NoError(err, "cant install certificate to /etc/ssl/certs/ca-certificates.crt")
}

func (s *PrivateRegistrySuite) pushTestImage(ssh *common.SSHConnection, registryName string) {

	imageName := fmt.Sprintf("%s:443/nginx:latest", registryName)

	err := retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			"apk add docker")
		return err
	})
	s.Require().NoError(err, "can't install docker and ctr tool")

	err = retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			"/usr/bin/ctr --address /run/k0s/containerd.sock image pull docker.io/library/nginx:latest --platform amd64")
		return err
	})
	s.Require().NoError(err, "can't pull nginx:latest from docker hub")

	err = retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			fmt.Sprintf("/usr/bin/ctr --address /run/k0s/containerd.sock i tag docker.io/library/nginx:latest %s", imageName))
		return err
	})
	s.Require().NoError(err, fmt.Sprintf("can't tag nginx:latest to %s", imageName))

	err = retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			fmt.Sprintf("/usr/bin/ctr --address /run/k0s/containerd.sock image push %s --platform amd64 --tlscert /etc/docker/certs.d/%s:443/client.cert --tlskey  /etc/docker/certs.d/%s:443/client.key -u testuser:testpassword", imageName, registryName, registryName))
		return err
	})
	s.Require().NoError(err, fmt.Sprintf("can't push %s to %s:443", imageName, registryName))
}

func (s *PrivateRegistrySuite) writePodTemplate(ssh *common.SSHConnection, nodeName string, imageName string, registryName string) {
	data := struct {
		ImageName string
	}{
		ImageName: imageName,
	}
	content := bytes.NewBuffer([]byte{})
	s.Require().NoError(template.Must(template.New("pod.yaml").Parse(podTemplate)).Execute(content, data))
	base64EncodedPodYaml := base64.StdEncoding.EncodeToString(content.Bytes())
	s.PutFile(nodeName, "/tmp/pod.yaml.base64", base64EncodedPodYaml)

	err := retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			fmt.Sprintf("base64 -d /tmp/pod.yaml.base64 > /tmp/test-pod-%s.yaml", registryName))
		return err
	})
	s.Require().NoError(err, fmt.Sprintf("Can't decode /tmp/pod.yaml.base64 to yaml for %s", registryName))

	registryUser := "testuser"
	registryPassword := "testpassword"

	err = retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			fmt.Sprintf("k0s kubectl create secret docker-registry regcred --docker-server=%s:443 --docker-username=%s --docker-password=%s --docker-email=%s@k0s.local", registryName, registryUser, registryPassword, registryUser))
		return err
	})
	s.Require().NoError(err, "Can't create registry secret")

	err = retry.Do(func() error {
		_, err := ssh.ExecWithOutput(
			fmt.Sprintf("k0s kubectl apply -f /tmp/test-pod-%s.yaml", registryName))
		return err
	})
	s.Require().NoError(err, "Can't apply test-pod yaml")
}

func (s *PrivateRegistrySuite) writeClientCerts(hostname string) {
	_ClientCert1, err := base64.StdEncoding.DecodeString(ClientCert1)
	s.Require().NoError(err, "can't decode ClientCert1 cert")
	s.PutFile(hostname, "/tmp/client1.pem", string(_ClientCert1))

	_ClientKey1, err := base64.StdEncoding.DecodeString(ClientKey1)
	s.Require().NoError(err, "can't decode ClientKey1 cert")
	s.PutFile(hostname, "/tmp/client1.key", string(_ClientKey1))

	_ClientCert2, err := base64.StdEncoding.DecodeString(ClientCert2)
	s.Require().NoError(err, "can't decode ClientCert2 cert")
	s.PutFile(hostname, "/tmp/client2.pem", string(_ClientCert2))

	_ClientKey2, err := base64.StdEncoding.DecodeString(ClientKey2)
	s.Require().NoError(err, "can't decode ClientKey2 cert")
	s.PutFile(hostname, "/tmp/client2.key", string(_ClientKey2))

	_ClientCA, err := base64.StdEncoding.DecodeString(ClientCA)
	s.Require().NoError(err, "can't decode ClientCA cert")
	s.PutFile(hostname, "/tmp/client-ca.pem", string(_ClientCA))
}

const podTemplate = `apiVersion: v1
kind: Pod
metadata:
  name: test-pod
  namespace: default
spec:
  containers:
    - name: c1
      image: {{ .ImageName }}
  imagePullSecrets:
    - name: regcred
`

func TestPrivateRegistrySuite(t *testing.T) {
	s := PrivateRegistrySuite{
		common.FootlooseSuite{
			ControllerCount:     1,
			WorkerCount:         1,
			WithPrivateRegistry: true,
		},
	}
	suite.Run(t, &s)
}

// Registry related certificates and keys
const (
	RegistryCertCA = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM5ekNDQWQrZ0F3SUJBZ0lKQU5oVmFPMmtxK3htTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkl4RURBT0JnTlYKQkFNTUIzUmxjM1F0WTJFd0hoY05Nakl3TWpBNE1USXlNak0yV2hjTk1qSXdOREE1TVRJeU1qTTJXakFTTVJBdwpEZ1lEVlFRRERBZDBaWE4wTFdOaE1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBCjVaU3IzR0QvRmRhZEdnakZwNjBPbG51M0NsQ1FQM1BPeXVXWVJuTVF4SHZTRUdiRkpkcTJhNXFuWFdqNzJ0OWEKaHhmRHdkdWk5RHdOd3ZGSUhrZ2thdU1WbjZOQWNiSzFMUlNVYk10RnYzSUY5cUZDZ3p1UnNtUGpmQjdKM2U1egpucXRsd2YyR2MwY3djb081S0JLZ09JSFRNZ1dOTkw5dzl3RGtSWjUyVGtVR1o4MG8wN2wzQjhaQTV0MkJoS2RNClpTY2VianFXNEJkQk54eWMyeEpjZzQ2MnF4QnB2S3Z6NmR3dThQQjNHNEgzTlM1MDBFRGZYVXBVWElBT2NlYlkKeFoyMmxLODJnN21zSFRzL0RYQW0rNk04Qzl5VVhodGFNYnBacWM3WFErTGZacStRd0hXRit6VVRLQ2VCWUd2RwpmTmdGa2JYK0V2V2tOWXV2eFNxQnhRSURBUUFCbzFBd1RqQWRCZ05WSFE0RUZnUVVjVEwyQzR1Rks0VGJhb1pVCnpVa0ZzZ0hveHJrd0h3WURWUjBqQkJnd0ZvQVVjVEwyQzR1Rks0VGJhb1pVelVrRnNnSG94cmt3REFZRFZSMFQKQkFVd0F3RUIvekFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBa3J1ODVNMTlSYTRBSU9HbmttZUk3ZFBsOU5VMgpUYTNiaVFLN0J6WU9qZ2VZUXVxbnpvaHBEM0t4QzFBdEdCZG5SeWtvRUwzWVlxM0liZXB3Zy9MeUpWczNNUDJXCm8rMGZGRFo2RWFNRzNNNEd1SFdzb0tvbHZuRXJkY2QrUnU1VGFoU2J3RjN1Yys0TFh2ZGliOWNXa01nZFQ2VWgKMExKWHJaTVA1K1QwM3RWdldreldmR2NUZXh4NlgrQmYxUnFrRm1BWmhuNUI0RjZlQ2liVW1ON0RMSlQ3QUlTSgptWWFsNWJ3K1IyYzZEUEZaK3FBQUlES0FXSDFCU2VTT2lEWTM3aStCNStsZW8yYVNCMTdDb0UvWUpWaWF4Z1BCCjVlcEZrcU9vV3IwbWx6MzVSZXZPU1A0cWJXSTBHMnRPR3orcmlVUWlMMXhXOFFMOVUxUTUyU29FRFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
	RegistryCert1  = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lKQUxseVU3RFEvVzZCTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkl4RURBT0JnTlYKQkFNTUIzUmxjM1F0WTJFd0hoY05Nakl3TWpBNE1USXlNalV6V2hjTk1qSXdOREE1TVRJeU1qVXpXakFVTVJJdwpFQVlEVlFRRERBbHlaV2RwYzNSeWVURXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRRENCdVJkc211YzBXU2NpVWVRM2F6YWJsYXVzNHZQQzVmWFJMZVduV3gxLzl2VHJJRU1YeGZBbGVQU2JQc0UKQU1BbVlZOEV2ajcvOXFjd0JEU2czU2c4eGIzNFBRWmZHU0Y0RHluR0VQN1BvTjZTVWJQc2c1aHdxSXA0RFhhOQovL0JEcVpuVDlGNExpZk01NDhPZmZDQ2ZrSXk4OGhaN01BcjhrcWtId0lGcDVhZ2ttN3A0WkZRL290L1dqWGxQCnZUSW13OGdLVVpvTHBPa3pBUEJsSURkekVvYmMxZkM5Q0I2TWduT0h0OFcwVXo3amxoVFkweHVnUXN2S2JrbVQKbGl6VTdlcnM0VXozL0JwMVdXcklCTTdNMjRjV0N4cWRIbGJBQ0FaYTB1ditoUmRiYURibHg0QWpRUkptMmRFRQpISERJMGtGeWxrMktxUVV6ajV3WVlIOHBBZ01CQUFHaldqQllNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFBCQVFECkFnWGdNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBZkJnTlZIUkVFR0RBV2dnbHkKWldkcGMzUnllVEdDQ1hKbFoybHpkSEo1TVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXU5R3RSaTFoSnpSbQpDUWFMQkw5dklWNTd1TDBJcXpHUTNpZDhHVXdyQ0h2bEZUbUc2QWFTRmlQRmRRT09OWWV5NWRoZURjZEtnbEI4Ckt1dllqOVJ0YXNZZmM1dlBPM0ErY0Y5UzdiSUNGaUZHM1BEZFdrLyt0ZjdhZFZXdWNSR0wzQ2JaU24vK1Y0N3oKNXIxbkVkMzF5cHhEM0swZUhLZTBwMDNtaE1nK2ZWR3A1TXlzdzFYdUh3K01EZmpjUzladk5XdkdTVFkzaGx0UQorcTFZTlJ6Wm1LaEltQkxmU0MxbWRQdnFQbk5RWnEzNmJtZG5lS0E0OEQ2S2JLRC9pT1dyempTMzllTFZwVGFBClA1ZHd0R2dUSVFsaTltYS8rSUFmQTI4Sk9NYXdGZUlzSU84N1doWkNwYjNaY2JITmxTV0VLNWxWeUpSeEVuYlYKSjc2OGxIZ2tCZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0="
	RegistryKey1   = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBd2dia1hiSnJuTkZrbklsSGtOMnMybTVXcnJPTHp3dVgxMFMzbHAxc2RmL2IwNnlCCkRGOFh3SlhqMG16N0JBREFKbUdQQkw0Ky8vYW5NQVEwb04wb1BNVzkrRDBHWHhraGVBOHB4aEQrejZEZWtsR3oKN0lPWWNLaUtlQTEydmYvd1E2bVowL1JlQzRuek9lUERuM3dnbjVDTXZQSVdlekFLL0pLcEI4Q0JhZVdvSkp1NgplR1JVUDZMZjFvMTVUNzB5SnNQSUNsR2FDNlRwTXdEd1pTQTNjeEtHM05Yd3ZRZ2VqSUp6aDdmRnRGTSs0NVlVCjJOTWJvRUxMeW01Sms1WXMxTzNxN09GTTkvd2FkVmxxeUFUT3pOdUhGZ3NhblI1V3dBZ0dXdExyL29VWFcyZzIKNWNlQUkwRVNadG5SQkJ4d3lOSkJjcFpOaXFrRk00K2NHR0IvS1FJREFRQUJBb0lCQVFDbExSamNhemdSbUhEKwpraC9Ldyt5VFI3dWpubFkzUExkWEc3anZEN1YxL3dzMWVIV2tBcEJGODFTdm52ZFN3UkRUbTlvVlA2Q0NaNGlNCjZBZWxxcURHbTlETnM2WG83NHYrbVdvR3BCRkkwTHFwOWNRbVpTRXhSMG9hU2R2OGhCWVdoQnZneFBnSytyV0YKWXREMnhNVkJFZDIrUEpuRzVXOTA5YVhRWTZISWM2NDFOeTQrSk0xQVdSVWxqcG1sSGJGVnl4R25xYmNpTk41QQpFYzVuYzhaRWdNd1h3UzhjeXN0ZXI2cHQvOVNteCtKK2REZEoyQjVmN204TGhucW9JQW1zUTJ4NGE2YXVKeHBPCnU3RmFqVWRhYnhJVXJ6TmZKQUUzZjRBMWhRT1hjMlhKd1Q5Z2Jva3B2YU5kVFBHaW0yUXY0TXQ3ekZlSXF4NVYKc2lmVW0zY0JBb0dCQU96ZjBTY2haVUJuRUZqQ2podVJqQWNXR3hTckdPMFFFOElKYVltYjd2dVcwM3FBZDdBSwp3TXFOckl5UW5ZaEJZbHJzY2t5Q3JBb24welNVRVdZblhiYmJJV2R1MUhoYy9rbVdNVUdBemRrU1hoQlh0dHg2CmFyY09IQm5JTGdPWWxQYWo5U3ZjbWx0ZEY4cUFkcDhXOVJOeHZRVVF1b0VJTFZCZ0o2dFlxM2t0QW9HQkFOR3gKYSsxU3BxSUhQRkFGejZaVmQ4T3VGQkxNdElpRGpRb2tBdlpZSDFTMTBVb1FaVVRqNzN4VW01R0ZNQnNQWjhmMwpDUnM3U1FXZEZid1lQTFE1RXdLNjkrK0JkcUJjcS8zKzJFamtRYjVEckp6VU0zWmhKUG5MNkVxWVdMdnNzbVhqCkdXOHF2S0NEd3l4UnBXdTAyNUdQY1hlU0lVN2Zha1pVNktZemQrTnRBb0dBSmFBZnJ1R0ZIY2ZCTnZnZ2JveWQKKzNvdGJ3a0dlcEYxTWZzZ3duVDhid1kwTFY4K283M3hoYnNmVDJ5aE9VVjVoQXZPMUF4bG0yOWNBeHdKNzNvTgpUc0JiKy93RXorR2xtcmE2dURibmU3V0pMM3RmVm9JemRVUk9mbUhudlRaOVl2Z0VONlZnOTJaQUl6Qm9wemlVClVUUmQyL0llVGVTb25mM0lEMVdVVnprQ2dZQUdqTE1oUzRhVzR3RDRRdVkwZk5EcjFNRWR3VFVXV24yS1JvdXQKSkIxK2FOdHJvODExOUdTampvVDVhNTZRQ2RBbEI4dEtCWFVIYnR1aDcyUGVBVFpkekhjNERPUW1xQjViSloyZAowVHRZZFFhc00xaVVKdjZmcXNYTHBxeUcyaUxNV2VhT2VWaEE3enltWXJwMi9jUXA3TUFQaXdudFM3OG5DVG5uCkR3NThsUUtCZ0gvaFhKMWEvM056aHo1NWFEOEJqMVBTZGNWWVU4d3VlSUs5QlU5U003elovc0Vrc3R3UlM3U1kKSUQxeWtTYkU0cklVSDRDZDNpWHFkeVJIWmxTM2NQNElmOElDbFFob1BuUHJBTW44WE9pcXBsRHkvVThTOXdnMwpDOHJKV05tM0U2YnBFRnRhaHVkYWlYcGNHSzZwOE9FQ0V4MHFvdzFxN2VJWGc5MXMrdTIrCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t"
	RegistryCert2  = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBekNDQWV1Z0F3SUJBZ0lKQUxseVU3RFEvVzZDTUEwR0NTcUdTSWIzRFFFQkN3VUFNQkl4RURBT0JnTlYKQkFNTUIzUmxjM1F0WTJFd0hoY05Nakl3TWpBNE1USXlNalV6V2hjTk1qSXdOREE1TVRJeU1qVXpXakFVTVJJdwpFQVlEVlFRRERBbHlaV2RwYzNSeWVUSXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCCkFRRGJDT3Ewa3JzdGs2cmIvR093SmU4cG1LWVI5NnplVXJKalQ0cFZ3UkdWQzVydmZoSzY4T1AxTWdaQTErd2cKS0wrNFVyMWlha1FRcml2bkpSbHJQZzFvVUlWaVJqdFR0anU0MzFFYy9GWXY4d2IzN2lsWkhWdjJUZDJvRityUwp3NU5laThWR1hMRWYrdzJQamhoU3lrNmpkcTNPQU45WHdQVzdVTUJrU1FpL3QyM0kvbkhrWmxDYTQ3QWRmVnBaCjhUckFBR1FmN3dFNzk3bGxPTHhLb0pObkZ5Y3dTWmJ1YnVGejU0SnFQcnB4RFE0dU1aZ1RtYmlqZlJseUk5dXEKTi9LZFNnR255NEZWRjNEMTI2QnV1RTNFQmc1ZkphemVTNnZ1ZDh3NTFLQVpmR0JIRUJMUmRpNWJ6bmRJR1dFTgpPQStTVG9GQVNMZ1VmTHpmYzlmNUdBUlhBZ01CQUFHaldqQllNQWtHQTFVZEV3UUNNQUF3Q3dZRFZSMFBCQVFECkFnWGdNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01DQmdnckJnRUZCUWNEQVRBZkJnTlZIUkVFR0RBV2dnbHkKWldkcGMzUnllVEtDQ1hKbFoybHpkSEo1TWpBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQWRjbndjNmU2MzJRcQpBKzBmbmg1am1rNE1JTkM4aWpzQlcwS2NuNzZ0WHV5NUtQc0Q5NUphQlRhemFqbllEd0IvNEhmQUFjcGdYNys5CnQwUklITFBpd1IxdGxySG92QUw3cFlEQlpDU3QvYjZDNW13ZUd3Nm5zejJlcXFlMUtHRVJRMmpyR3VJRFJRREYKNnJlMVY5elpWa3h2QzM5YjhSRWd4OW1uZW9DWnhJZUZtMGNQMFJNVGVmS1BTbjFNSG1nRDNhQ0Voc0k5UzRpMwprVkUwbWlLeThuQ2VzUTBDL21tV01CbktUakZmSzFzNDVpd3FmY2dpbVNKZ3FCVXlpUjlud05kZ0FqNUdxV2c3CitqQ3V2azhqWGh5T2JlemZWTmNoc1crSis2ZTh4NEc1ekU4eVNYb3YyamhnQWxERG1peTRLUHIxRktub2RyaXgKTDYza0VTTDIrdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
	RegistryKey2   = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBMndqcXRKSzdMWk9xMi94anNDWHZLWmltRWZlczNsS3lZMCtLVmNFUmxRdWE3MzRTCnV2RGo5VElHUU5mc0lDaS91Rks5WW1wRUVLNHI1eVVaYXo0TmFGQ0ZZa1k3VTdZN3VOOVJIUHhXTC9NRzkrNHAKV1IxYjlrM2RxQmZxMHNPVFhvdkZSbHl4SC9zTmo0NFlVc3BPbzNhdHpnRGZWOEQxdTFEQVpFa0l2N2R0eVA1eAo1R1pRbXVPd0hYMWFXZkU2d0FCa0grOEJPL2U1WlRpOFNxQ1RaeGNuTUVtVzdtN2hjK2VDYWo2NmNRME9MakdZCkU1bTRvMzBaY2lQYnFqZnluVW9CcDh1QlZSZHc5ZHVnYnJoTnhBWU9YeVdzM2t1cjduZk1PZFNnR1h4Z1J4QVMKMFhZdVc4NTNTQmxoRFRnUGtrNkJRRWk0Rkh5ODMzUFgrUmdFVndJREFRQUJBb0lCQUR5WXUrNFhCZ2UyNmJjUQpuVGUzVnZJb0ZCRzJkckhQS1NFR2VWditIUElpRXN3ZEVldDhCMlRuWVFtQmN3YjJud3ZNZ0M2QS9iR3JyZU8xCnhOR0JpazRJc000ZVpmMWoxaVB3VEUxN2xoQ1A2S2FnMGZtZ2dMZWtsU1VTOE5rOFdFSDQ0eXZ6S3VHUklCQk8KSEhhVEY2eHJnZXdURzdiNFlFTmhOTWpKMTh6SjNFczFwYnZnQkl6WEp0Nzd1UmpERUZ5cm56R1ZwQURJOU9Rawp0aEpGWHF5YW0zbmRVOHNiekp6THVRZnFHWmQ1OHNrOFQwRlgwV1pYQ29aeS9UenU2aTZyakhJcXZuN2owWHcvCjRPWEdCWUpaOTJqVXFUWUxvRURQU0RxZTN5NTMxWkZ6TGtkSWRjMjBGQ3JyOHZrUXZKY1FSQjgzL09TSFdFeGsKR2RadGhZa0NnWUVBOWpLaS9tNm5VdXFCMnhhS2l5ajN6MGxFTDVobDN2aGU1dndac2hsaWNMcVJ3WHZET0FuVQp3MnR6SGlFUUd6MTFlUlNBNC9rbHRhYndZbmdBbWN5bWVqUW9FUm82MVpOWXBBVEgzSkkyWmxleW1uRDl3VkVmCmx5cXNtNmVCNkF5ZThmaUZIbmxVdlpZTm1rRFljSDVhNkJEMGhBekpkQVVicjI4OW50OVFsZzBDZ1lFQTQ4RnMKSkJubkJ4dlNSUDRaN3Vrd1RPWWZ0UHhEZlFTWXN3ekZmYnR3RTZheksrUzNwd1h1QVVjRFpXZ0xvRytYbTJHRAp2WDlvQTRWVk11ekpuZ0tkbFU0UndkSlRBSHFRamRPbHFOQTVnbTk3Wm5MMmJrbW52RE9PU3J4L0hRT0VoU1hwCkY3L1Q0WTV5OTlkWVBRQXBuYmRjU2JVck1tNkRRSlV2WHpPZ2J2TUNnWUVBMFh6eXpsYXZqOUUxWDR3RnBUWGQKN3dhanUzQU10clpXWW10L0hkbVZ0dUE1NkEzOFpmR1BsaDBXM2pzNTdrUFVjb3VzeE04YWRFQXhhVWc5RXFGZAp3cndnbjdUVy9TYWNsU3Z3T0ZJOWNjWUxsbml3bzA3NDkzTDdYcE1nNmFmYmszOXBIaTRWbWlCVlFMME9ybUlGCnpsT25DN21wclV3dmE0N1hPeGxBQS8wQ2dZQUEzbW9GTVR3YVlOYktnSldrdmFyN2dCMDYyWU9BWkpZWWlNSHcKR3Rqd21rQXd1S3lpckhrZDlDRmxMNkpydUVGQnpIdHVLNkEvOHpCQ0EzazVheFVpenF0dXE5aTVOYjU3YkFWRAp3WmVXa2NwTXQ3K002Q2NGcHNTeU1FbmoySEdXK0hBTk1TUWp4aUZXSkxJbmVXcXZPVlhXeWlRaUN4M2hEekNoCkVsZFlWUUtCZ1FEVlhZWlJDL2hidE42WnV3eG5yU1pmTEdia1hUcmhwQXkrV2gzc1ZDdXVrTW1vNlU3bzdYUDIKS0hJN0wzQmgxTWc4MnlkU3JEVW1xTld4RFo5dXkxNC8vOTJHSDBoV20rZ0drVlNCeU5tbmoxMVJmODhFZ29nWQpsL2V2b3ZaejVyeHdDb1pNTHpnT1hUdFNuaElYcVpoaGRDUlJVYXBmUEQvMHYrZkMxdjlvREE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
	ClientCert1    = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNVENDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBS251eWlCbUVQK2xvRDM2OTg2ZTFLTnZ6bUZLejgrenVCRWoKN3orOUcvUXJqRFhybDNMaStjbE0zZGFCemNKRmIrMHZKYnY0ODdxVWc4a2tIalozdlk1aDRTU3lQZnlrK0R0cQpDNTZKWW5oTHVXT0h1cVlNN2I3OVkxYTRMSjErb3ZpS1d4ZUZWdVJhbmFHQkZNaC9kakRCbzd6cm1uRFAxYUJTCnk3b091VWE4ZnV1YmhtV212UTBSTllRcHA2SFZnekcrU1dpN2ZSRzY5OU0wTUVKeHVWQTd5ZEdaYVFJL1NMQjMKNk1wOXJUM1poaXN3b3NMSGZMcU8rSEduQ3R6YXdEcXhtWG5KSEZqRTJOQk5yZmJYZHQwaEwvcFFWSFpUY1FkKwora1M5aFZtazV2WkxUd2RLNXlnRHU4d0pGNE5QcUlCU3had3oyOTR0TmVicFB2RWFOaGo3SjcxZGs5Y0VBalBJCjdxTjdQbjlGbGh2eHFpMVFYNFdsdEx5MUd4K1duTnNpSWRyeWFZR1pnTHJqbEs4Vk93MmtqbzZPUkwzQ1BIc2MKUTFSZ21RMVl1TFZ0MjZ3M2ZNMDRJMDUwWG5wSXVGSG05S2VrQStpNjdXNXRKbExuSUlQWmw1dDNkWnhnWFlsTgpOTzRkUXRHMTdoSklQMVdNSzdDcTdva2E0Q21rMjRQVVVaT0VyUVRVM09RS2dGS2xwdEFmVk1UODczTVVQR2tVCnA5NVc4cmtSaDdydXErRy9peHB2Um1ZUW54TXJvOWcydzFhZlFOSUMyUzJQR0R5Y1ZXV1dkVmp1QStEZ2dWVlMKY2tuWmtDQjdKY2hmVW1CMjJHYVZHb1NoWFN4ek81eEtxdENBdWh1Z2JDNDIrOCtVSmY4d2VnS3J6QjZUN1FDSApVbzN3Z0YvOUFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU0zeWRpMGFKbHFpS0hlWjQwLzlZVjN6CjE4L2QxazhoaW1KT0Nzak05MXIzZVVHS3Jyb3U4Y3BFUXlzQy9GbVI5anpWN0dPUmlUREpvUERybmgvV0RzRTYKSmtDRGJObHB4bjlOK2phSTl4YnR4Yks3MmJmbXR0WVk1dkNOTHR1bHNhdUc0Y3YvT2FrNGNKdnY1L1NaTmZFNgphTzNnOVg1UHc5MGdFT3NIS3VUZlk4ODR6NjRpQ3FyRGNDS3Q3cE1WNDBkSkwrb2hwRFFvR3dGRE90bERSa2lNCkNBQUpIbU5ZVlQxRnJMTFNHdStwQWdNbWpTbnNyUGNPNHowcEFZUjRRcGRzclQwa2l4K0t1bUlrWGJsWm9MTm4KcCt1UlF5MW92YWVsNkRlVzdvZlBMQy9sQU9pUkdIdkRyZnBaZlMvVkFCNEdCUytlYXkrU2JNSEcvWmdDbk5pTQpELzFmTlhtdGJZNXpjQ3NESTZ3TWNwRnZSSE5qSEZrNEI0cjdBYUpmQ3pka2Jlbk9SZEV0eFEwL2kwbXMxWktRClJhcGtESXNjTmpBczJsaElmSjZyQWZQN2x6SFBjeGNydk1LYnEzQTBoVThpRi92ZUVoS2MxZGlnU2ljZlhIdTAKcFl0T0RVZTVTZEF1V3dUNk00dDRvZjNLMWZxajRsVzNjUlpJRGFnRC9OUWtCUnFaSkZIT3ZvbWhmZklmbS9QVgowd3E1cEVFTlFaUytSVkJ6dmxrWUxWNHJ3Y0VvN1gwU2RpeVdNbmxRTVpXL1JyKzVKN1orV2kvOCtOYk5uK1FzCk1PMHNyN2gyd2QrRFJiL2RxSmxJcWJHMkFHU2lrYmZIVWJQL0d1WTd5UVJpV2ExL29rbGZnREV2QjJ3OGpXek8KVnEva09lTjZocmRDdCtLaExRbXVLZnZtZm1iRnYzWnc2NXIrbU1YTk50NWQwQU04RE5XdTQ2L3dkRkZ1Nk8rUQpXZ1NxZGNvMnJpTXRJYmxpUngrdnE0N21XNkNmaGZrbmVScWtoTEhKQzBrd0FkUTlMRWxGa1ROR0l4M01FblFuClN6dUg4Mms3V3U0elllbGFUMWVNK0w0UHZoTW1xc0IxdHVIYmhaaWJkazBDTVdDcVptNmdFaitaQ3hlK3hYQ3EKMTlYN3J3UmkvalQxYWZaV2llRFN0aU0vQ1ZXNEZZbnYvcEVlTjJ5TVZTaGgxN2ZwazFNWWRVcHU2N2dTK1gyWQozY1pOYVN0b0tpeG0rRE5QTGdCcXdqdGdoeThkOU9TK3UzVGV0TzZlMHFjckYyU09tMy9XcU4rS1JWNGVkOWxiCnR0b0ZwRzF0YnkxaHlYc241TG9Ca0hMUW45MUtOYXo5KzFVdmRGcFFaQWZacGJWNUtUcmJFRE5rSlIzT085YXkKeWEyNDdpU3NnbzBXbGZMTkZUdjUzWWtHOUtvdGp4b1VxNVZ5U05pc1h6a05Ec1F0Mi90Nk94cjRyU3RoOGhaQwpmSkFnRnJtTlJ4WE8zelZOSEFKdktmTnpGNzltWVVFb21IVWhBcHgyU2puK0hUZHJkLy9hMDdVVS8rSFlONnpiCnI1RU5QZDFSSU5SS3pCcFl3azRQL3hiRzlES2VXbTZoVFA3RkxBVHJSYXVxTVdYK0pobTRGM21QMlN6cWl2NGoKQitRTyttTGd5UDVUaFVLeVdhMkZXakFrSzRIa3FhMGZDQnYycmdwc1QwV3I4Y1IvTDJrYjJiQ3lEL2lUdmU0KwozNWh4MHM4Z20wZ0E4eXFVSklYVEhoZW5Yd2hpdHhtOG9lSDFtVUJSd0g0MGMvamtkaWQvWmlXdXlxWlovS009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
	ClientKey1     = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcWU3S0lHWVEvNldnUGZyM3pwN1VvMi9PWVVyUHo3TzRFU1B2UDcwYjlDdU1OZXVYCmN1TDV5VXpkMW9ITndrVnY3UzhsdS9qenVwU0R5U1FlTm5lOWptSGhKTEk5L0tUNE8yb0xub2xpZUV1NVk0ZTYKcGd6dHZ2MWpWcmdzblg2aStJcGJGNFZXNUZxZG9ZRVV5SDkyTU1HanZPdWFjTS9Wb0ZMTHVnNjVScngrNjV1RwpaYWE5RFJFMWhDbW5vZFdETWI1SmFMdDlFYnIzMHpRd1FuRzVVRHZKMFpscEFqOUlzSGZveW4ydFBkbUdLekNpCndzZDh1bzc0Y2FjSzNOckFPckdaZWNrY1dNVFkwRTJ0OXRkMjNTRXYrbEJVZGxOeEIzNzZSTDJGV2FUbTlrdFAKQjBybktBTzd6QWtYZzArb2dGTEZuRFBiM2kwMTV1ays4Um8yR1BzbnZWMlQxd1FDTThqdW8zcytmMFdXRy9HcQpMVkJmaGFXMHZMVWJINWFjMnlJaDJ2SnBnWm1BdXVPVXJ4VTdEYVNPam81RXZjSThleHhEVkdDWkRWaTR0VzNiCnJEZDh6VGdqVG5SZWVraTRVZWIwcDZRRDZMcnRibTBtVXVjZ2c5bVhtM2QxbkdCZGlVMDA3aDFDMGJYdUVrZy8KVll3cnNLcnVpUnJnS2FUYmc5UlJrNFN0Qk5UYzVBcUFVcVdtMEI5VXhQenZjeFE4YVJTbjNsYnl1UkdIdXU2cgo0YitMR205R1poQ2ZFeXVqMkRiRFZwOUEwZ0xaTFk4WVBKeFZaWloxV080RDRPQ0JWVkp5U2RtUUlIc2x5RjlTCllIYllacFVhaEtGZExITTduRXFxMElDNkc2QnNMamI3ejVRbC96QjZBcXZNSHBQdEFJZFNqZkNBWC8wQ0F3RUEKQVFLQ0FnQU1NYzJoZTVHV3R1MEQ1YUdvMnk4Sk4zbkk4NVJzSkVwK09HVHYzd05GaDJaOWJCV25NZkNZNklJMgo1WU85Z0R3aStqSXNCaFovZWk3bTNVZXB3dmdBWXJmRWFXSVhZa05LQ0RjalBscXBwVTE5ZmZ6Lzg0ZVFJQ0RqCjFUMm1ZN01RUU9WK2o1d0hzUlVFeFAyWDBjWEtnK3JiSU5FcGJWQzRPNWpSRmtObmR4bG9rUFdaRDlrYk9mUHMKTXcwTGlRWHNLT3Fkc0c2dU9ndVV4WGI5SGFvZHZ0eWh4TytMTUwxbnBJTTVITUcwNFlwR1NTdzA3Qm5nVFdnNAp4N0w0M0YzVkdHK2FGTHVMQnoxRDNYOHhhbzdtR1g2VzZQTFd0dkF5aUlNdk1hYURJMWxMcldYVGNTV2Jjb0VrCmlEWit2dFdwdDhia2liZ3FmbllTeHdRMFN4dzhtc0hzcVlIOTgzWE9Na1kva1BoZkFyZ3JOWUdKUHVGZnprOVgKNnFMZ2tYaCt0eGtEUDNuaWNjcURZQVVMdHBleWdQeU9NZmFia0dWTFhuS2Y2aE8vTVBQZy9ITzhPbHBGeTV3TwpiWDRXM29EODAzR0FzOGlvNGpUN3Q5YXdFU3lIUnFWV0hXNDdIdFVxZDVDQjRmbEo2QzN1dmw2YW5VdGZ4RTh1CkFLYTRNeFRnMm1VSDlJV2ZvZjFwWTh0L3ZKMmVKdVZkSW9rUmhCYkJwckMyQkJ5MjlTTTlXVjQrWk1vZWRndG0KTENEUHQ5YXgvdlRpTEpTUGdkRDVyZ0tyVU4rU095cURJaWhWTUNiZnpqVWxUT3AyVW9DcXpub01DTHo4ei94dgp6SWhYSk96YzNYb3Bvc05jZWloWlZhZjQ5M0ZrOS9BNm16ZDRNc3h4WlVNQ3BMd2lRUUtDQVFFQTBTcUNkam5ECjFKVHY3cUxUY3RFUWxGMnR1S3hEYzFVMy9icnFvbkpONllSaEdxRnRZTEE2a05YblA2TVdEcW1OTDVIQlRLUWYKMFc3bjdpUERCa3h0SHVsNnFMcENKSWFlcWRXS1dwZWl0M1RoL2prbXEyVm81ekUrbUhjTVQzb1hFS3VzMnNCWApnTFNIOXRweGZYY3NEU0h0MVRjc0FtL1ZNaVBjZkRwR3ZRN2Z0Nk9MUVRwTGVpdGRGdWZJZ0R5YjFrWEtkM1dSCmFRQ3dsMTVpWGlyRytsNFVWb2JrYmZxdktkdWVvbDRGbTgraTEyZmVYQ2hNV1VLQzN4Uko4bUZERGtmK2hWL1cKSm96WnBUaVZGMDhOQk5JK0x4M1l0THFKNEdkSDFJMEJDdXdyVUEyTTVFU3I3ZldDblh5WHpkOWhkZ2RKQkZBRgpUcnBTc1ovVE16SHRVUUtDQVFFQXovdHBNL1ZaS1hQUTFLcFJUTnFFa2MxNUVwTm1xQXI1UDByY0NRazFtTW5kClpHOG5ZTWZzbzBLaDIveTNlVHl3ZkFHVS81eEp1MmxnUHAzeE9lQWdLUmc2WHZsc1d3RVBleGpNNDVaZ2IxdjMKK0JDVFBzT1dKdXFmWDlrL3ZjYUVJSlNVWDlVeEFJVzNVcGxWUGlIOElPTFlZN2VhRHFraEFCMnJET1FBdnVwcgpicHU1UUNhUU9VVGJoNXN0akg0SDF2NGFRdktPdERNd1U4b0VjaUNyRUNGTHhEUUdyZWpjREZMNjEydVM0MXlTCnNLL3hkYnUxWVVaWnZ2Y3hWM0JZbVRxUWJMS3FhRTAyTnh1VHFQU2pmcWU3T1pOaE95emJFd1VDRVhJdVJ5ajMKNXBUU0h5ZEJ5QlZESkVrRjFpYVdRTGwxZXJ5R2N2RUZtTzJ2bURIczdRS0NBUUVBbHZveEt6Y3M1R0FSQTlaaAovQ2x0NXpuck1EYWZoVHRJN0F1a1cxZFlaNnNYRUVyZkVZQ0M5WktBbGMyWkdVSkhWOFBFbkJhSHBQdUJ5OEhpCmZzUmhxNE5wOXlwaW5jelI3OUxrUjluV0tNZmtiRVZDWlVzUXVuZ3dMNHNXeHJOZ3ZMYStVVE91dFljWjhSUGkKQVdjbzA5M2V0eDFZMWZWMUZQa1BxRmZFUWFqZjBNVHF1azFpdDY5ZlJTNU82a2xWVHdnWFNiMENGYUhhMVpmYQpOeEIzaWJhb3hZQWVtRWZ2Y2E1RnhmdEozeHF6OXZuUlpnSHNnaTFoRzdhZ1hhVFk2eEVLWmFrMGdhVC9ZS1FECjhjd3NvSU5GUVdzd3hkc3p0RmU0WUhMYkF0QlB2enZZcTlmcHBoeWxpQm1yMVgxYzh2MzFOWGl4TEErUHF3aXIKUVBQVDBRS0NBUUJIU1ZZSzBCcUtnYjdmVmExZUdUdjlPWjg1QmJyVytFUHNOTDFzZjNLV2R3SmlUVk1DOGlPaQo1ZERTdFRFeDVlSmI3ckxpVmZCVHcwK1F4dFFLMFU1VXA1QkNRMTJuWjVxbHg1OWFsbzFoUGZXbFdoRU9IejNWCkF2QXppeVEwNk5rYXpiSjVrbm9rUXJET0orNDJ5TEZCbUY4dzlwcGdVZ29VbnhhazZYVnorcWR1RndRTS8rckoKSmxmVWlCUzVwZTBML0xhRm9kdlYyZ0hEaG1lMXNvclBrWW9GcXd0ckNuaDU1T3REY1FTODExc1VJb294bjNBUQo4bXNLY0hIQ0ZhalloR0ZDVUk3bUJ5a0JCSHU5R25UN2tZUXp2TmREMENFYXlNbW5yeW83aThoRWlWZm9BNjJoClplQklqSnJxaHZsVEgvNHJYbmo2NXEvVGRneU1ydmdWQW9JQkFEQ0ZkeDh6aXZxL1ZINnJyOGFENVRQMUVucGMKVUo4cDlnbmtNdjRVS0lhbzhscFcvZGViN0s0dno2bkRXSEkySWZlOHZwWGY4bmxYMVd4bkdubzhXSVVDWng5MQoxREl2c0pXNjZnYnBYWWJWV2RJN3NFL0xNa0MxLy8vamMxd1RUOHhTVzV2c2tjZmdPN0JuSmZzaUh4aXBPRGJZCnhEL2pyRStrZ1pURkxjdExPMVQ1Zk52bWRsZlRJaU1pQ0dsOVRTUnp3TVgxb0JtZUNtU3Q5LzVwY1hjU2lnY0MKMFBtc1BPRFlJOGlRS1ZLc2lwTkRwVVlTSW0xZ3JiTW4vMENWVVYrTkdoSng2dTd2R0hDejl0NWVXdjJxa09oRwpnODZoS0QzRkh3dVpWU1laVmJGSTN6NnI3S2RKS2RmT3RlQ1lMK2doMStYcGM3WXNtQzFBay81UERyOD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
	ClientCert2    = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNakNDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTmVJMTV0MU5GdTk1MnZ6STZRNk56N0RwRHUvVUFaYTFkcWsKd3lYNFhlUStYVGlNMHRxdEdrZTVGUittbThuUzFUY0ZjdDR5cHBCRTJBSzMxUHAzamhoNGxIQVc0SUdwTnhLaApxWWsvOVg1TXZoWHlrQWVCMTBJZkNidnNOL0dXZ2JDY1Y5eFRXbnA2VFFNRXVpSHY5TkZ0aU1qZm41ZDFuVlcrCmVJQVE5MUt5R2hiYWxobXhGaEwvQXNXZ0ltOHA3YlN3TjlDWklaQ0k4YnZkeGN3MWZiMS9kWVhKbnpUN0RyUUQKSWMzYU1tc3c4RGpxTk1Xek9XdlNCejA2eVlBdkJkMXhVT3hkc2lTOU84UzVNSm5jU1R1ZEVUSU5KcUJPTmRMaQpSa01CQnBVcDIzemZwWU5UMnplZFhaV1hBeDZHeTFLWFBOaWt6cGs4bGE5SnUvTjZFWWtlOERoZnRRcjZRNVgzCnRVNVFBTGtLY3Z1SjI0OW5GbEZlYzRRaCttMjRCSzVDTEZLeEhaU2VRYlhXZC8wM2czeUs1R3JTa3RRalZPdEgKb0NLZldhV0tpdFVoQmdvV2tVbFpIUnZZQzhyaThuM3BVMXlUdFUvZUVVWjc0bmQ4RGowWS9XVCtDckdHbFNSQwpDMHRXSEFuL1JrNUszOUh3VjF3ZlB2Q1dNb21DSW04MHpqeW1HQ0szZ29DQXJBbERGZW05NGoxYzhtRXNIUGNxCjlEcWVWd0pkemVmMEl1Yjd3R2ppUGhVODJjbWpqdlpFdlhlUXIyV091RlBsZ2hnaElqK1I1T2h5WmlUdXdUeE8KTUZ1U3IzMXg3R3doU3lIVmVoZklQUUZYZ1lHbWEwSjIyRXVxdzJzbDA1VlNBTGlnNTUvWVZQMk1jcU9GUEpVTApnUHhpM0thdEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU9OZG9uTnQwUXJaT1gyL1ZMbFNBMFVzCndPRFMwNkNrL2NRZEorSFBYemRjc2ZCQ2VZcElNTGNhVWhETlByUUJsSjZZNjB5QUd4UVlFMjFUcGY3a2xnZloKNXF1UFRxYjQ5cWt1a3ZFOXArTlRnbUtKeVRTbVNzZCtXN3Rha0t2RVAvRFVvSlU3RHRiQVNVZTl1eDZhbndKNwpybFJ1ZGdPZHQ5aXBtK1k0blpWOEE3L29SVEpKM1lDTjhiWDlVUXlwNHArQXl0Sm1kaXRQSFE0bUtPRlI2VnVwCmMxTjA5bDlYeEdLR2lVVEtyVU1BZUwzVVUwbHYrM0xxZnlLQkErUkxGZkVqa1dsbXdNUlM2SFhvUkprQUx3N20KakRUTy9MYWpQODNoaS9Ibmp6di9CKzlOV1Zta3FsT1h1UCtVUHZEdXNzSTVJQnMvZ1ZKWGZsK2pwcFhxSHpZeQo0UlVLSlc5UCtVUHBJMlovN0RXcm1VMzZDaHFudG9DMXEyVHMwcGJWOVdCREt5cTJpS3dBaFV3akhRbzkrTDcxCiswNW9GbmNCWDA0V3RkZlVoME9lNXZxVjk0OTBvaVhRMS81b0FDL2dIZENjcFlaQnRsalJaN2hIMGlNMHVhNy8KRlpkL1NDZGs4VGhPanlzSEZVc1FZZldPd0RpOEZteS81MStqTFozQnZ4N2hGTk9TL2FnSzVBNzBObDQwcmxSagpvTVhBTFphcldrYStMaCt2YkE5M0JCemZGa0xScXZhaHFwSWZ0eE9yNzBTbDZ4QzhTQXBkK1p3TGNYM0k0c0V5CmZrbFg0RDlWRVFsZHZEMkdjMFNLclY3MVRqQzhUdmZUMElhQWEvN1dZK3dTSC9lRUZYT0JpNC93azFNaGRrVGUKUUN2RnBCODl0dGsyM1YxbWdaeWJwbmQ5cnZ3K2N6MzJ4VTJuN0YvaWlZN3JXdThYblVoVmdBVzBKdTZXdmd6dgpNdTdpSmpCTzQ4cnNYZDRuREY1eDVtaHZEUG5RdFFPaER1enN5anVyY3ZGUFVCcDVhSFhkRDJFQTYxb0hSWUtRCkR6ejZyaU5kYnVsbGpTWmVSOHk4Qnk4L3hWc1E2elFIamtnZkxMNldId29nQUNjNlhYK3ZOVGt4eTRPQ2E3Q1UKcGtiaUlmSmNtRCtiNEJUdEY5T1Y4VU05a0NDLzNiWXhnYjZtNDgyMHB0SDk3QVp6a0hrQUREa1VwdFUxamIrZQpRenkrNzhKODM1V1BQbVc5Mk5WVE9QZ0VVcGZyV1lIYUVNQ0VvYTllbi93RHRQSnVMamMxUEdDYzlCS3BoczRsCjlqckc4WHpyVkJpcFptQ1kzZ20zL2xqY1I5WU9iOHlOZ3p1RnFjYlRnT01jTjdWd1kyU0tubVJMWkJ5ejc3L0EKd0tjN2NRK3VyS1BjSWU5UkNMOEVHSzhtQUE1STVhczJab0Jkck0zRFlwbndLOVBjbHJBWFFWMEwrWktzakdUZApKSUhHMkpDdUxHaWw5d1VlcFRRMkNhanhFMnJlSkNBNEJaZmJubEFCY0h0OExYUjVucm5vY2FMaHozWjBYUC9HCnlka2xYVFhvZmJKQU5ndVFZZHZSOElpN2JCSy94VWVURG1EUGFOeVBRelpkUGcxSGpDbjRyOFNYU1FlYVV5NlYKUkl6Y0Q2NCttU3FhV0ZIU0dhUTVaT1JiTk5wMkYyWHdjL0FvdEpJQzU2SHh4YU0xYUdHODQ0LzM4ZnYySkl2agpNWWwyLzFETEoyMzk1aVF4ZW04YXNmVHg2S2RoL2FVSjFMZE1wL2kxeDJrOTZDQ2FacE9wdU5GbDJvaGxBcjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
	ClientKey2     = "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBMTRqWG0zVTBXNzNuYS9NanBEbzNQc09rTzc5UUJsclYycVRESmZoZDVENWRPSXpTCjJxMGFSN2tWSDZhYnlkTFZOd1Z5M2pLbWtFVFlBcmZVK25lT0dIaVVjQmJnZ2FrM0VxR3BpVC8xZmt5K0ZmS1EKQjRIWFFoOEp1K3czOFphQnNKeFgzRk5hZW5wTkF3UzZJZS8wMFcySXlOK2ZsM1dkVmI1NGdCRDNVcklhRnRxVwpHYkVXRXY4Q3hhQWlieW50dExBMzBKa2hrSWp4dTkzRnpEVjl2WDkxaGNtZk5Qc090QU1oemRveWF6RHdPT28wCnhiTTVhOUlIUFRySmdDOEYzWEZRN0YyeUpMMDd4TGt3bWR4Sk81MFJNZzBtb0U0MTB1SkdRd0VHbFNuYmZOK2wKZzFQYk41MWRsWmNESG9iTFVwYzgyS1RPbVR5VnIwbTc4M29SaVI3d09GKzFDdnBEbGZlMVRsQUF1UXB5KzRuYgpqMmNXVVY1emhDSDZiYmdFcmtJc1VyRWRsSjVCdGRaMy9UZURmSXJrYXRLUzFDTlU2MGVnSXA5WnBZcUsxU0VHCkNoYVJTVmtkRzlnTHl1THlmZWxUWEpPMVQ5NFJSbnZpZDN3T1BSajlaUDRLc1lhVkpFSUxTMVljQ2Y5R1RrcmYKMGZCWFhCOCs4Sll5aVlJaWJ6VE9QS1lZSXJlQ2dJQ3NDVU1WNmIzaVBWenlZU3djOXlyME9wNVhBbDNONS9RaQo1dnZBYU9JK0ZUelp5YU9POWtTOWQ1Q3ZaWTY0VStXQ0dDRWlQNUhrNkhKbUpPN0JQRTR3VzVLdmZYSHNiQ0ZMCklkVjZGOGc5QVZlQmdhWnJRbmJZUzZyRGF5WFRsVklBdUtEbm45aFUvWXh5bzRVOGxRdUEvR0xjcHEwQ0F3RUEKQVFLQ0FnQktSUTQrdEhGNVY0UUNUOE10V1I0bVU1WXBQSEJmOERjVzQ0V1hkUEV0c0V2Qks4MlFxdXVPWVhtawo4VzFuYTI0clNvWmRpTWlhbUE1elNWTnJoMzBBYzdSNnQzZGZWcWJ5bGFCcytnd25IRnk0QldDYUphUytWU0d1Cmp1UnNMRGUrV3ZGdnE0MVcvUVBDa1lOdUpGaVJQaFJQVzdlTG9teTMyaTE5dTlydHRRK0dab1lvamp3VUNhbXoKM2MxZnp1dnBRbnZKTnFzNU9lZEtuRTRIWXp0VDdETGNDakVCT2EzRVcvdnZDa3dyWWE2MWZnYjNSUjM1U0dOVQpOd2l1VWdYTVc3ck42QzkxdDN0NyszQ0M1RVNiOVRDeXRaTmswKzU2SDV5a2hCcjNsWGZibk5sVTJyV0VnWVo1CkFKT0RsbUZEc1hlM0UzdFpsR1hrQkIxdTlkWktidWpEQTNxdnFLWG5ZNnNzcENzdDRRbzBHNm5KbmF2bVRMcmUKbFFscGF1M3kxcWZ5Z1VFOXJsa0xHdmVHRGtHV0tCVlBRQ2FwcTl5bmNYOGlrWUQ1MUV3VUZISG5ReGd1dVJueApXK1BEOHBGVUcvSTVrZzZzZUFtTkxrVGlPNU5tVFZjMm1heXJRMWVqcjdaWGk1Q2xZL0xMaFk3L2t3aFBnL2FTCnZVSnNrUHRCR3BkVWJNM1lxdnAvMjh3K2hDODltVm00eE5oVXRBbWVnem1HdW93YStwM1l1MUwyTkdabzM5Y08KMVZ4VTNKMDBVVGVka2F0NHM0Tlc2NGNPZ0tOMU9GQlJGNk80RzNmVWZKdm9JRlhROWwwemdLS3N0LzBSL0p0YQpBWjZYUHpCSmlWeEswc3c1d2lhRFk0ZHZIWXlNc3o0NE56UzVySDhKV0huUFRtcGd4UUtDQVFFQTdVcm9KZlhKCndwWTltTUFHMjNsOUM3SGJhWENPMDFVSEdiNWtKbHhoNFlmN24zZkwwTTlEbWxCTGlYeFZFSGVMelhVZnk1ZGEKWitOWGsySXFFS3FpVmEvN2k3eDcwNVhnZUZUT3lIYW4ra2Q4SWpQbTNpNmlFcy9HVnU3VWU5UmhOMU9Mck01MQpkeng3MnVwTWRsbXFLNXlLV0RqcDFqV3RVVjdFUHMwNTFvSFVlRzI0UnRjSXZRNjBBVFB5NW9BSFRwK25FQ2NUCndIVjcrbXdCQlNEWHh6aFNSNk5XeEc4dmY0MXFlT05aZ2JTOTdVYnl5b3k2REptSWtiTjRQRlluSXd4YUIzaFcKaDd4NFE1eXlTUGRuaFBnaW1QMXB0T1pFaWIzS2JNbHN1QlgvMG85c29TTk1DbjQ3VVB5ejJtQjdsTmlvek5PRQpnSXgrUElwNHhlK0Nmd0tDQVFFQTZJYlBKczdmeC9kWWpxRjY3WXFyS2hkQkkzSWtCK1cvTS9sRjc4NHNiNnB3CjV4N0JHMUxsbktGVk56amgwakNQN0Z3K3NFTmhxOTFHeHNyZ1RYQmpqeHpqazFaMW1EazBQZkgwbU5CMWxBZlUKVnhYM093YmsyeU1tMTNnOU5jZ0FmUDZLWC8zZFo1QlozK25KVzZpK2hVdXBDRU9GMUkyQkdERjNmVWRYUmJKSgpuaEl5WGNFL3lTWjlTa3A2cmhnRE1GZUY5VnZYVHBYTlhhQktzVGtZcmpqRjhMNkhVeGhDQW1SU3MvYzZvSXJZCnNnUHY2eEZKcUF6SnIyYm1jOFJQS21TdjFpdFVVc1gzRHpzK2FPZXJydFRSODRSZ2tuWDlQSGJHQzRlbjh4YU4KaXR3ckt6eHRRS3ZGVlJYUERmaU9IQjNsdFQwT0hTZDFZOUJObFUvbzB3S0NBUUVBaHVGQk8vS09FTEZkcWVuYworL3YrZkJ0STRKSStYUm5EdzNwWmF3U3dEb1pCSE0vM1ptV3B3NWxJbG9tNXdIWnpYUUhxWk10UGRDWGhyY0RxCnNEYU50NjhraUxWR25XcGdBWVlUVkJjK1BDRk9DaEwrYytTRjg3TnV4aE5UYkYrNE1yNm1jaitZdllILzFOdkIKUXJTTTZlVTlMaENMdWxzZ2ZWUWtzSjN1OW1NdDVwWlhYTXoyQnFESTZMWWlwNnEyZkpaN1c4OGFoeGRBdFlPVwp3TmQrVDV0UUNiQnFyWldWcGljNEVpY0l4WlY3TDloWVFaSGtYeTBXVjl0dnlMd2YydWcyZEhDT252RWVXekJDCmx2OHFOSWJuQTVkbjhvL0EvWnFINlhaRStnNW5MOFNldHFsZG04bE01aWYrQTI4OFQ4c25oK1hqTno2a3NyenoKRVcrbStRS0NBUUFHOVNtenBwTUpuN3dWb0gxV0tFVVE0RnRCblVPNHZNWW8zdmVad2xpUUN0Q1FDZHFMWDhLaApHaTY3bFVja2kvRnlpQndVR0NBUERYTDF0ZEphWHRlTHk3aC9peUcvcVU2SDMvcUtyQW9vb01kWXg3NTdGS3k2ClplWGVvcWxxTjQ3VUxxV2pVNnhSVWY5dWRNZGlwN3p6cmh6anMybUl2NmN5T3lDeExmWk5qcFVuVnJJTkhpQXoKZTZSYUdicHNCU25yUTJNdHdVN0MramFINjZqd2ZwM2ZjTEZ6ajYvcTY1bm1DbXh6R0IyMytnK2IzQVJNeTFxaAozYWdYU0lQeXlOZjVrOE96Szk2OUQxRmlNa3FleHZmYkptRVY0VXNtZHNOYUVNL0NQby9tOVRETkMrTjZ5cmNXCkxVMmRTeWJENjBFTlZGT3dSYUJyZk9mRlVkRlFlM0NqQW9JQkFRRFBqa2JlVDRBZUc2b201amdud0dEUkhxMkcKelZZZzdqY2JPVS96cG1mMWlYK0ZNUzNzTlcxemI3em8xMnBtc0xyUW9VZTI3bktPc3k3cnJRZmtUbFQxRkZPWgpwMTlGL0dKc2RGd0FBSitucWY1TDhqM3NhQWNIL3pKd0grU1FpZm9EdlIzUmw3Q0NKbDVTYjd3QTVLVkdwRmJ5CjluOS9wNE5jQXhyeFYvKzZJKzRORUNmU2pYbDFmdzloU0Q5WFFqMkluUVhYSkRHZlpJNStHVGYrM1JPakJiTjQKMjZqMG54ZFMwdEZLMmtWM0ZNVXhVNDBvVG9JMDFTRjBkeVpWajFtTGFBLzBMNFI4OXVxSUxRTDBTUWEzUDJKUApQcE5GZlg3N3AyeXB1ZEY2cE1FYklvdDJsSldtWTA3OERnNFdLWXVoaWdTV253UU4rY1VieU1xbC95UTIKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K"
	ClientCA       = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUpLVENDQlJHZ0F3SUJBZ0lVREZGMS9YbjZ5MzhjdEc4czVqOGFBdG1mTTNJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmxaMmx6ZEhKNUxXTnNhV1Z1ZEMxallUQWVGdzB5TWpBeQpNRGt3T0RRNU5UUmFGdzB5TXpBeU1Ea3dPRFE1TlRSYU1DUXhJakFnQmdOVkJBTU1HV1J2WTJ0bGNpMXlaV2RwCmMzUnllUzFqYkdsbGJuUXRZMkV3Z2dRaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJRUR3QXdnZ1FLQW9JRUFRRHAKZ05oYmcvZis3RUh5VEhqbXpyZ1VMdHlMeWNHajhIaTJubjljZ0k2YWJWS0tHVkcxOXdZYnVkcUJLRUpYRks4egpXNUJ5cXRTcGNXdWxjNVhnamQwREo1cDZFK0xIVno0Z0JhRnpmVkdLTmNWY04xREhUcXlMdW90cEZxMGVlTjBzCktxc0EyWTdpaFRtbjVMM0lqbUI3NXp2SjB1L1FnNU1MZE1WZlFDOVh4QlJPcmx4MWtDWjlYcDMwOTRCVjBYMTcKUmhZK2tTS25xNkxBdG1UYU4wTzNCRHVFWXR4dTllRWJ5UVVHcS9pbk13M1N2c0NIN0NxSTJCaUZ2d3dkNjNyagpGWU5pUEEzWk1jYTlERy9lN3hLZWU3TGNhSEZ6M29Sa2F4RnJyc1RLMU9ZSDNVWjl0djVvbDEwQ0hzK1dPeGs4ClFPQTd0eHNTV3FpZWNHWHB5YXZFVXFtb3BLQnhxMngxUFFBa08yQUNQa2prTmlaSDNRTGpUdWEwRTNwZnhES3oKbTFxNldVYXZyV3ZzOVNqeW1QZ00wcE9ES3VWdGJFMHo0RnRVM3EwRnlYWEpuclc0cko3MDMrMTBaVGpsUWtKRgoxTTZDeHZjaXVLcjdITGpTa05nKy9aa3dHcFFOZXFiQ1E1Q2NaZ1lNdXlkM015MHU5VFhIU09STUw0VVYvSUxnCi9aUDVYcHVBUmtXaitNZFNtSUFDdzE5U3kvOGxPTURwQzF2Z1V1cUJ5MVl1N3l3K0xDTkJxKzhBVUh5VXRjd28KRHNvdW1ia3JmNldxY2FXMEFOSHNDemxNOEthb203aE56cVZnRiswa0FhUC8zRHI5cjFYbEdDVmpyZVY2UjFJdQphUG5SSFpZaWFXaHJ3WFpqZ0Y4UVp4ajdhM3FmRTRmVkhiMkdnYnVwZDA3eEExNW0vaEl1RDJieTd4ckttZ3BNCndvUWF1VEtEKzBIZHFVd1h3cVYwMGo0K0QzNkhZZjhESHllZVFGQlpZNmQ3YktIN3NFVFlvQ05ScUpoYUhSelIKaHY3cUlTOERiNTUyQTFpbmhaWTVUOXM2SzlyL2xyd3pWT0k0S0NyUGdQbVVWbWtCRWl5SkRqM28xK3dVc0lLNApNeXVjUlF4aWJjVWlzSlNXVkdMK2ZvU1MxZUx1azQyN0JiYWNaWkRwcVkwTWJrR3dLQUhIdEgvZXhXV3N5TEtWClRRbkVKNU5PeWdJaStpTFVGMHNIR1VJeklmYTdWZHRFWVJHY0phSTg1U0pLd01BdU4xV3R2MzlRWmVnNXVNdEgKbTFIOUZHOGtOemk3SUU1aDNhSCtKSEhRMjJuUTFwb0tobmM1Z3Q3UXhrdWE0RXk4d2FGbnZuaU5hc2ZpdFJIMApObnlOQlZVdDllZTd6NUpRU3hXM09RNkIzZS9jK1dMSE5nMlJXYi9VT1JWZzFRTzVueEQzTlU3M0YveGFHVFltCnRLLy9PK0ZxaENVRnQwQXlEUk15QUhTdVhKR2NFWjB3bXNQRUxBTEFQenlWS1Vqb1VUYXFid0ZBOU9zT3dDR2gKSSt2S3JnRDRqY041a1hZdFEvUDlNenpPbEpwbmNLVDJNdDNxS0JsclZqTGdJVW13Q1V4RGk4SWRzREJpeEVGdQpXQkthQWI1QW9uM0J3RzNsTVdmQXdvZGJ1MUpLeko1dEtaQmVONUJ3WTlTekthNWI4djE0bkRJbnU1Nkx0dFBQCjJoQlQvQW9sMGRPcmVvK3lCMndzSTBjOWdiR3RLQmZjeVQ2YlRQOGRSSDNMOXlzOGRYdlFkZU9FOUNHR0FBbnIKMTlPWXVTcEdXdmNvYnhnQjVnbkpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNBN3VsRE5CcmR3aUd3aGtPTQprZ0dLQkFNay9EQWZCZ05WSFNNRUdEQVdnQlNBN3VsRE5CcmR3aUd3aGtPTWtnR0tCQU1rL0RBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJRUFRQ0xYRWRuQThJYVVGV1M2RUVkZnJvaytWSkwKZVVhaCtJSHpEcElsWjBITkJuaERiQ3M3ZTI3bC9SUm82aG40cGJEc0ZwSHk5WTArajJZSDBnOVBGbERuRDVDZgpvUGhEcFM5VkJqUzZUMjZrUFdEeFdaMHA0am9sMzZKYjZrcnU3Vy9qd2d1Q3hGczIwRlhWWFphSkU1UkVjOXNXCjhOeXBtMi9XcDJUaVVxMmN1UjFHaDZUQzYzbEZTZHhuZGRlaVZZYi80eVFMK1RZY0RyK2lxWWtoaWlibVRyWEkKWU9nVlVqbHhVdTdaQktyTjkvMzhMbnBKZDUwWTV0UkYxWDVGNGwxL1N3ck53bkZwOThWL25qVUhxU0M3SzA3bApJMmhRTTZCR1dCUm94S1ZyWmdhUThjTXNEQjg2QytEV0JYYWJZNHY5bmVOQ2xDQU5YcjlYb2QrYmlLM3oyWnNmCm5LalJjLzRQQm8vc1Q0SXM2U01CZGViTnhJbFZXMzRyUm1QWHd5QW5oSHRucHlYK3l2aldTb2FjVFpQTEJmd0gKUGp3elpYdi9zOXpYZENXbXVHaFRKVXBwaWxra1d1VkRrMEoraWo1Vnp5YzZnSnN4Q29Kc1h4dmpoRXJtaVRUeQpZdWw4WXNzdG5JQzg4dDB0aE5GNHlXaElQNjVEQXEwb1Mwbkh3S1RsS1BCSFZmZEhybFM2SVRaZzJ1ZVROV0RVCjgxL3BVVkV1U0xPeWZ4NklPcnVUb1dTMnppQVgzTlUrTUhPT3FYbEx2ekJGR1VKMytsc1pScVlCNnhiUFU3Q3MKVERCUUxOWXhzREYxYlJ0T1U1MU1VUnl4QkR5MENSQUZ3NzlQeUFlT3gzRDlVaXVpclRYcE9XQ2Q4YmhMZjBSMApia3krSDZjTDkwRmh0NWVHRHZPTmUvbC8zNlM0RndTREpndmVoQzFabFFDM2VaVmRuUTFSa2RDWXZVQy9MMVFjClNKU3ByM0FIYyt5d2JySWZPcVRrUEY5L2MxOXFFSlFwSnNsZldMRThYbFlxYXRueThBR2U1eS8vdlIralY2WFEKNEhPdHNsc3F5eEdSR3daSGkyK1YzRDFtVFRzQU4raGtOcWxzU3R6VGFBSmVLbGwzenJvNGlhUENKKzh4bHlqWApEZSt1ZWk3THBPa281cU1vb0N6TENUSWlVN3FtODgvY05XYWtTL1ZVOUJLSUZsSnFqM2ZBSlRtSHhDUnBKU2c5CkltTHZCbjllSnZISmFUR1B2TWpvVENrV0YrTVlVdjVTTXlEbHhiQkN1ZUhORUxldzl2QVpXSXRyMnlabFNDNGIKaUllaFZ2V3EwZk50YldNNnAwQytVejkvL2ozU21QUmpQeHlvTEhHNjRjVXRTQWNRYlJRaWFqdElSa3hIV0FORApYa2NjblhaeFRzZHhETDRkRTVnVzRBckNsUmFFQ3d0NFhBQnhPeStuRk05QXFNemNnWUt5cEcxZ2h1ZWIya0dMClJ6ZENyMlN0UEZMRUhiYUxDUmVRS09XV2JYZTBsb2s4UWZOQVo2c1BZYTZ6cjQ3ZU4yQnRYZ2wwVkRmV2V2aFkKR3MrOXNpTDJqdng3TEt1SU9WYWZRQWlPMlVNKytVZHBsYUZUWVgwb3dNb0N5U3NZWUUveis4ZzZPdlFLOG9aNApUUU54RDBxd1RFL3hZeStkaytiSG4xT3M2YnRoVmszMk9HU2ttMmNBWm1wM0M4SU9nYlpmREtCUldQbU5QaXBnCmZNRWdvWTZNSHFsSnFOcFBBS1ZtTnFBKzdnVGpVaDlORUkyUnVDcnppTkRJZDhHSzhrd3huSTRoSm1ROQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="
)

const nginxConfigTemplate = `
events {
    worker_connections  1024;
}
http {
  upstream docker-registry {
    server localhost:5000;
  }
  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
    '' 'registry/2.0';
  }
  server {
    listen 443 ssl;
    server_name {{ .Hostname }};
    # SSL
    ssl_certificate /etc/nginx/conf.d/cert.pem;
    ssl_certificate_key /etc/nginx/conf.d/key.pem;
    ssl_client_certificate /etc/nginx/conf.d/client-ca.pem;
    ssl_verify_client on;
    ssl_protocols TLSv1.1 TLSv1.2;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;
    chunked_transfer_encoding on;
    location /v2/ {
      if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
        return 404;
      }
      auth_basic "Registry realm";
      auth_basic_user_file /opt/registry/nginx.htpasswd;
      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;
      proxy_pass                          http://localhost:5000;
      proxy_set_header  Host              $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_read_timeout                  900;
    }
  }
}
`

const registryConfig = `
version: 0.1
log:
  fields:
    service: registry
storage:
  cache:
    blobdescriptor: inmemory
  filesystem:
    rootdirectory: /var/lib/registry
http:
  addr: :5000
  headers:
    X-Content-Type-Options: [nosniff]
health:
  storagedriver:
    enabled: true
    interval: 10s
    threshold: 3
`
