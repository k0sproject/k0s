alpine_version = 3.19
alpine_patch_version = $(alpine_version).0
golang_buildimage=docker.io/library/golang:$(go_version)-alpine$(alpine_version)
go_version = 1.21.9

runc_version = 1.1.12
runc_buildimage = $(golang_buildimage)
runc_build_go_tags = "seccomp"
#runc_build_go_cgo_enabled =
#runc_build_go_cgo_cflags =
#runc_build_go_flags =
#runc_build_go_ldflags =
runc_build_go_ldflags_extra = "-w -s -extldflags=-static"

containerd_version = 1.7.14
containerd_buildimage = $(golang_buildimage)
containerd_build_go_tags = "apparmor,selinux"
containerd_build_shim_go_cgo_enabled = 0
#containerd_build_go_cgo_enabled =
#containerd_build_go_cgo_cflags =
#containerd_build_go_flags =
#containerd_build_go_ldflags =
containerd_build_go_ldflags_extra = "-w -s -extldflags=-static"

kubernetes_version = 1.29.4
helm_version = 3.11.1
kubernetes_buildimage = $(golang_buildimage)
kubernetes_build_go_tags = "providerless"
#kubernetes_build_go_cgo_enabled =
#kubernetes_build_go_cgo_cflags =
kubernetes_build_go_flags = "-v"
#kubernetes_build_go_ldflags =
kubernetes_build_go_ldflags_extra = "-extldflags=-static"

kine_version = 0.11.7
kine_buildimage = $(golang_buildimage)
#kine_build_go_tags =
#kine_build_go_cgo_enabled =
# Flags taken from https://github.com/k3s-io/kine/blob/v0.11.7/scripts/build#L22
kine_build_go_cgo_cflags = -DSQLITE_ENABLE_DBSTAT_VTAB=1 -DSQLITE_USE_ALLOCA=1

#kine_build_go_flags =
kine_build_go_ldflags = "-w -s"
kine_build_go_ldflags_extra = "-extldflags=-static"

etcd_version = 3.5.13
etcd_buildimage = $(golang_buildimage)
#etcd_build_go_tags =
etcd_build_go_cgo_enabled = 0
#etcd_build_go_cgo_cflags =
#etcd_build_go_flags =
etcd_build_go_ldflags = "-w -s"
#etcd_build_go_ldflags_extra =

konnectivity_buildimage = $(golang_buildimage)
konnectivity_version = 0.1.4
#konnectivity_build_go_tags =
konnectivity_build_go_cgo_enabled = 0
#konnectivity_build_go_cgo_cflags =
konnectivity_build_go_flags = "-a"
konnectivity_build_go_ldflags = "-w -s"
konnectivity_build_go_ldflags_extra = "-extldflags=-static"

iptables_version = 1.8.9
iptables_buildimage = docker.io/library/alpine:$(alpine_patch_version)

clean-iid-files = \
	for i in $(IID_FILES); do \
	  [ -f "$$i" ] || continue; \
	  tags=$$(docker inspect --format='{{range $$i,$$tag := .RepoTags}}{{if $$i}} {{end}}{{$$tag}}{{end}}' -- "$$(cat -- "$$i")") && \
	  [ -z "$$tags" ] || docker rmi -f -- $$tags; \
	  rm -f -- "$$i"; \
	done
