# options for analysis running
run:
  timeout: 8m

  build-tags:
    - hack
  skip-dirs-use-default: false
  skip-files:
    - "zz_*"
  tests: true
  modules-download-mode: readonly
  allow-parallel-runners: true

linters:
  enable:
    - depguard # Checks if package imports are in a list of acceptable packages
    - gci      # Checks import order
    - gofmt    # Checks whether code was gofmt-ed
    - goheader # Checks is file headers matche a given pattern
    - revive   # Stricter drop-in replacement for golint

linters-settings:
  depguard:
    packages:
      - gopkg.in/yaml*
  gci:
    custom-order: true
    sections:
      - standard
      - prefix(tool)
      - prefix(github.com/k0sproject/k0s)
      - prefix(k8s.io)
      - default
  golint:
    min-confidence: 0
  goheader:
    template-path: .go-header.txt

issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  exclude-rules:
    # https://github.com/denis-tingaikin/go-header/issues/18
    # This means that the header checks are ineffective for all files with build tags.
    - source: "^//go:build"
      linters:
        - goheader
    # Ignore deprecations: They shouldn't break the CI. If this were the case,
    # it would be pointless to have them. There's no way in reporting them as
    # warnings without having a non-zero exit code.
    # https://github.com/golangci/golangci-lint/pull/3184#issuecomment-1235438429
    - linters:
        - staticcheck
      text: "^SA1019:"
