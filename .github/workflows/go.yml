name: Go build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - "docs/**"
      - "examples/**"
      - "**.md"
      - LICENSE
      - "**.svg"
      - ".github/workflows/docs.yml"
      - ".github/workflows/mkdocs-set-default-version.yml"
      - "mkdocs.yml"
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - "docs/**"
      - "examples/**"
      - "**.md"
      - LICENSE
      - "**.svg"
      - ".github/workflows/docs.yml"
      - ".github/workflows/mkdocs-set-default-version.yml"
      - "mkdocs.yml"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [linux, windows]
        include:
          - target: linux
            build-docker-image: k0sbuild
          - target: windows
            binary-suffix: .exe

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # for `git describe`
          persist-credentials: false

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache embedded binaries
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-embedded-bins-${{ matrix.target }}-${{ hashFiles('embedded-bins/**/*') }}
          path: |
            .bins.${{ matrix.target }}.stamp
            bindata_${{ matrix.target }}
            embedded-bins/staging/${{ matrix.target }}/bin/
            embedded-bins/Makefile.variables
            pkg/assets/zz_generated_offsets_${{ matrix.target }}.go

      - name: Cache GOCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-build-gocache-${{ matrix.target }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-gocache-${{ matrix.target }}-${{ github.ref_name }}-
          path: |
            build/cache/go/build

      - name: Cache GOMODCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-build-gomodcache-${{ matrix.target }}-${{ hashFiles('go.sum') }}
          path: |
            build/cache/go/mod

      - name: Build
        run: make build TARGET_OS='${{ matrix.target }}'

      - name: Upload compiled binary
        uses: actions/upload-artifact@v3
        with:
          name: k0s${{ matrix.binary-suffix }}
          path: k0s${{ matrix.binary-suffix }}

  unittest:
    name: Unit test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache GOCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-unittest-gocache-linux-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-unittest-gocache-linux-${{ github.ref_name }}-
            ${{ runner.os }}-build-gocache-linux-${{ github.ref_name }}-
          path: |
            build/cache/go/build

      - name: Cache GOMODCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-unittest-gomodcache-linux-${{ hashFiles('go.sum') }}
          restore-keys: |
            ${{ runner.os }}-build-gomodcache-linux-${{ hashFiles('go.sum') }}
          path: |
            build/cache/go/mod

      - name: Run unit tests
        run: |
          make EMBEDDED_BINS_BUILDMODE=none check-unit

      - name: Validate OCI images manifests
        run: make check-image-validity

  smoketest:
    name: Smoke test
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        smoke-suite:
          - check-basic
          - check-addons
          - check-byocri
          - check-calico
          - check-cnichange
          - check-ctr
          - check-customports
          - check-dualstack
          - check-externaletcd
          - check-hacontrolplane
          - check-kine
          - check-metrics
          - check-multicontroller
          - check-noderole
          - check-singlenode
          - check-backup
          - check-k0scloudprovider
          - check-cli
          - check-disabledcomponents
          - check-extraargs
          - check-configchange
          - check-upgrade
          - check-psp
          - check-statussocket
          - check-tunneledkas
          - check-workerrestart
          - check-kubectl
          - check-k0sctl
          - check-metricscraper
          - check-customdomain

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download compiled binary
        uses: actions/download-artifact@v3
        with:
          name: k0s

      - name: k0s sysinfo
        run: |
          chmod +x k0s
          ./k0s sysinfo

      - name: Run Smoke Tests
        run: make -C tests/smoke ${{ matrix.smoke-suite }}

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: smoketest-${{ matrix.smoke-suite }}-logs
          path: /tmp/*.log

  smoketest-airgap:
    name: Smoke test for airgap install
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download compiled binary
        uses: actions/download-artifact@v3
        with:
          name: k0s

      - name: Create airgap image list
        run: |
          # Pretend that k0s has been built by make
          chmod +x k0s
          make -C embedded-bins staging/linux/bin
          make -t k0s

          # actually create the image list
          make image-bundle/image.list

      - name: Cache airgap image bundle
        id: cache-bundle
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-airgap-image-bundle-${{ hashFiles('image-bundle/image.list') }}
          path: image-bundle/bundle.tar

      - name: Create airgap image bundle
        if: steps.cache-bundle.outputs.cache-hit != 'true'
        run: make image-bundle/bundle.tar

      - name: Run test
        run: make -C tests/smoke check-airgap

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: smoketest-airgap-check-airgap-logs
          path: /tmp/*.log

  smoketest-arm:
    name: Smoke test on armv7/arm64
    strategy:
      matrix:
        arch:
          - arm # this is armv7
          - arm64
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.arch }}

    steps:
      # https://github.com/actions/checkout/issues/273#issuecomment-642908752 (see below)
      - name: "Pre: Fixup directories"
        run: find . -type d -not -perm /u+w -exec chmod u+w '{}' \;

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # for `git describe`
          persist-credentials: false

      - name: Prepare build environment
        run: .github/workflows/prepare-build-env.sh

      # We cannot rely on this for arm: https://github.com/actions/setup-go/issues/106
      - name: Set up Go
        if: matrix.arch != 'arm'
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}

      # Install Go manually for arm. See above.
      - name: Set up Go for armv6l
        if: matrix.arch == 'arm'
        run: |
          echo "Setup go stable version $GO_VERSION"
          rm -rf -- "$HOME/.local/go"
          mkdir -p -- "$HOME/.local/go"
          curl --silent -L "https://golang.org/dl/go${GO_VERSION}.linux-armv6l.tar.gz" | tar -C "$HOME/.local" -xz

          echo "$HOME/.local/go/bin" >>"$GITHUB_PATH"
          export PATH="$PATH:$HOME/.local/go/bin"
          echo Added go to the path

          echo "Successfully setup go version $GO_VERSION"
          go version
          echo ::group::go env
          go env
          echo ::endgroup::

      - name: Cache embedded binaries
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-embedded-bins-${{ matrix.arch }}-${{ hashFiles('**/embedded-bins/**/*') }}
          path: |
            .bins.linux.stamp
            bindata_linux
            embedded-bins/staging/linux/bin/
            embedded-bins/Makefile.variables
            pkg/assets/zz_generated_offsets_linux.go

      - name: Cache GOCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-smoketest-arm-gocache-${{ matrix.arch }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-smoketest-arm-gocache-${{ matrix.arch }}-${{ github.ref_name }}-
          path: |
            build/cache/go/build

      - name: Cache GOMODCACHE
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-smoketest-arm-gomodcache-${{ matrix.arch }}-${{ hashFiles('go.sum') }}
          path: |
            build/cache/go/mod

      - name: Disable race checker
        if: matrix.arch == 'arm'
        run: echo GO_TEST_RACE= >>"$GITHUB_ENV"

      - name: Build
        run: make build

      - name: Upload compiled binary
        uses: actions/upload-artifact@v3
        with:
          name: k0s-${{ matrix.arch }}
          path: k0s

      - name: Unit tests
        run: make check-unit

      - name: k0s sysinfo
        run: ./k0s sysinfo

      - name: Run smoketest
        run: make -C tests/smoke check-basic

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: smoketest-${{ matrix.arch }}-check-basic-logs
          path: /tmp/*.log

      # https://github.com/actions/checkout/issues/273#issuecomment-642908752
      # Golang mod cache tends to set directories to read-only, which breaks any
      # attempts to simply remove those directories. The `make clean-gocache`
      # target takes care of this, but the mod cache can't be deleted here,
      # since it shall be cached across builds, and caching takes place as a
      # post build action. So, as a workaround, ensure that all subdirectories
      # are writable.
      - name: "Post: Fixup directories"
        if: always()
        run: find . -type d -not -perm /u+w -exec chmod u+w '{}' \;
