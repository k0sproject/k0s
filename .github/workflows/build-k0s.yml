name: "Build :: k0s"

on:
  workflow_call:
    inputs:
      target-os:
        type: string
        required: true
        description: The OS to build k0s for (linux or windows).
      target-arch:
        type: string
        required: true
        description: The architecture to build k0s for.

env:
  MAKEFLAGS: -j

jobs:
  build:
    name: ${{ inputs.target-os }}-${{ inputs.target-arch }}
    runs-on: >-
      ${{
           inputs.target-arch == 'arm'   && fromJSON('["self-hosted", "linux", "arm"]')
        || inputs.target-arch == 'arm64' && 'ubuntu-24.04-arm'
        || 'ubuntu-24.04'
      }}

    env:
      TARGET_OS: ${{ inputs.target-os }}
      TARGET_ARCH: ${{ inputs.target-arch }}

    steps:
      - name: Set up Docker Context for Buildx
        if: inputs.target-arch == 'arm'
        run: docker context create builders

      - name: Set up Docker Buildx
        if: inputs.target-arch == 'arm'
        uses: docker/setup-buildx-action@v3
        with:
          endpoint: builders

      - name: "Build :: Checkout"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `git describe`
          persist-credentials: false

      - name: "Build :: Prepare"
        id: build-prepare
        run: |
          .github/workflows/prepare-build-env.sh

          executableSuffix=''
          if [ "$TARGET_OS" = windows ]; then
            executableSuffix=.exe
          fi
          echo executable-suffix="$executableSuffix" >>"$GITHUB_OUTPUT"

      - name: "Cache :: embedded binaries"
        uses: actions/cache@v4
        with:
          key: build-k0s-${{ inputs.target-os }}-${{ inputs.target-arch }}-embedded-bins-${{ hashFiles('embedded-bins/**/*') }}
          path: |
            .bins.${{ inputs.target-os }}.stamp
            bindata_${{ inputs.target-os }}
            embedded-bins/staging/${{ inputs.target-os }}/bin/
            embedded-bins/Makefile.variables
            pkg/assets/zz_generated_offsets_${{ inputs.target-os }}.go

      - name: "Cache :: GOCACHE"
        id: cache-gocache
        uses: actions/cache@v4
        with:
          key: build-k0s-${{ inputs.target-os }}-${{ inputs.target-arch }}-gocache-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            build-k0s-${{ inputs.target-os }}-${{ inputs.target-arch }}-gocache-${{ github.ref_name }}-
          path: |
            build/cache/go/build

      - name: "Cache :: GOCACHE :: Prepare"
        if: steps.cache-gocache.outputs.cache-hit
        run: |
          touch -t "$(TZ=UTC+24 date +%Y%m%d%H%M.%S)" build/cache/_cache_sentinel
          find build/cache/go/build -type f \( -name '*-a' -o -name '*-d' \) -exec touch -r build/cache/_cache_sentinel {} +

      - name: "Build :: k0s"
        run: |
          make bindata
          make --touch codegen
          make build
          echo "k0s${{ steps.build-prepare.outputs.executable-suffix }} binary size: **$(du -sh k0s${{ steps.build-prepare.outputs.executable-suffix }} | cut -f1)**" >>$GITHUB_STEP_SUMMARY

      - name: "Upload :: k0s"
        uses: actions/upload-artifact@v4
        with:
          name: k0s-${{ inputs.target-os }}-${{ inputs.target-arch }}
          path: |
            k0s${{ steps.build-prepare.outputs.executable-suffix }}

      - name: "Build :: Airgap image list"
        if: inputs.target-os != 'windows'
        run: make airgap-images.txt && cat airgap-images.txt

      - name: "Upload :: Airgap image list"
        if: inputs.target-os != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: airgap-image-list-${{ inputs.target-os }}-${{ inputs.target-arch }}
          path: airgap-images.txt

      - name: "Build :: IPv6 test image list"
        if: inputs.target-os != 'windows'
        run: make ipv6-test-images.txt && cat ipv6-test-images.txt

      - name: "Upload :: IPv6 test image list"
        if: inputs.target-os != 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: ipv6-test-image-list-${{ inputs.target-os }}-${{ inputs.target-arch }}
          path: ipv6-test-images.txt

      - name: "Cache :: GOCACHE :: Trim"
        if: steps.cache-gocache.outputs.cache-hit
        run: |
          find build/cache/go/build -type f \( -name '*-a' -o -name '*-d' \) -not -newer build/cache/_cache_sentinel -delete
