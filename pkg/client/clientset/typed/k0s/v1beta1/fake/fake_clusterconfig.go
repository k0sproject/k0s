// SPDX-FileCopyrightText: k0s authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/k0sproject/k0s/pkg/apis/k0s/v1beta1"
	k0sv1beta1 "github.com/k0sproject/k0s/pkg/client/clientset/typed/k0s/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterConfigs implements ClusterConfigInterface
type fakeClusterConfigs struct {
	*gentype.FakeClientWithList[*v1beta1.ClusterConfig, *v1beta1.ClusterConfigList]
	Fake *FakeK0sV1beta1
}

func newFakeClusterConfigs(fake *FakeK0sV1beta1, namespace string) k0sv1beta1.ClusterConfigInterface {
	return &fakeClusterConfigs{
		gentype.NewFakeClientWithList[*v1beta1.ClusterConfig, *v1beta1.ClusterConfigList](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("clusterconfigs"),
			v1beta1.SchemeGroupVersion.WithKind("ClusterConfig"),
			func() *v1beta1.ClusterConfig { return &v1beta1.ClusterConfig{} },
			func() *v1beta1.ClusterConfigList { return &v1beta1.ClusterConfigList{} },
			func(dst, src *v1beta1.ClusterConfigList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.ClusterConfigList) []*v1beta1.ClusterConfig {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta1.ClusterConfigList, items []*v1beta1.ClusterConfig) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
