/*
Copyright 2021 Mirantis
*/
// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	"context"
	"time"

	v1beta2 "github.com/k0sproject/k0s/pkg/autopilot/apis/autopilot.k0sproject.io/v1beta2"
	scheme "github.com/k0sproject/k0s/pkg/autopilot/apis/autopilot.k0sproject.io/v1beta2/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ControlNodesGetter has a method to return a ControlNodeInterface.
// A group's client should implement this interface.
type ControlNodesGetter interface {
	ControlNodes() ControlNodeInterface
}

// ControlNodeInterface has methods to work with ControlNode resources.
type ControlNodeInterface interface {
	Create(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.CreateOptions) (*v1beta2.ControlNode, error)
	Update(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (*v1beta2.ControlNode, error)
	UpdateStatus(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (*v1beta2.ControlNode, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta2.ControlNode, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta2.ControlNodeList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	ControlNodeExpansion
}

// controlNodes implements ControlNodeInterface
type controlNodes struct {
	client rest.Interface
}

// newControlNodes returns a ControlNodes
func newControlNodes(c *AutopilotV1beta2Client) *controlNodes {
	return &controlNodes{
		client: c.RESTClient(),
	}
}

// Get takes name of the controlNode, and returns the corresponding controlNode object, and an error if there is any.
func (c *controlNodes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.ControlNode, err error) {
	result = &v1beta2.ControlNode{}
	err = c.client.Get().
		Resource("controlnodes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ControlNodes that match those selectors.
func (c *controlNodes) List(ctx context.Context, opts v1.ListOptions) (result *v1beta2.ControlNodeList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta2.ControlNodeList{}
	err = c.client.Get().
		Resource("controlnodes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested controlNodes.
func (c *controlNodes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("controlnodes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a controlNode and creates it.  Returns the server's representation of the controlNode, and an error, if there is any.
func (c *controlNodes) Create(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.CreateOptions) (result *v1beta2.ControlNode, err error) {
	result = &v1beta2.ControlNode{}
	err = c.client.Post().
		Resource("controlnodes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(controlNode).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a controlNode and updates it. Returns the server's representation of the controlNode, and an error, if there is any.
func (c *controlNodes) Update(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (result *v1beta2.ControlNode, err error) {
	result = &v1beta2.ControlNode{}
	err = c.client.Put().
		Resource("controlnodes").
		Name(controlNode.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(controlNode).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *controlNodes) UpdateStatus(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (result *v1beta2.ControlNode, err error) {
	result = &v1beta2.ControlNode{}
	err = c.client.Put().
		Resource("controlnodes").
		Name(controlNode.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(controlNode).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the controlNode and deletes it. Returns an error if one occurs.
func (c *controlNodes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("controlnodes").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}
