/*
Copyright 2021 Mirantis
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1beta2 "github.com/k0sproject/k0s/pkg/autopilot/apis/autopilot.k0sproject.io/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeControlNodes implements ControlNodeInterface
type FakeControlNodes struct {
	Fake *FakeAutopilotV1beta2
}

var controlnodesResource = schema.GroupVersionResource{Group: "autopilot.k0sproject.io", Version: "v1beta2", Resource: "controlnodes"}

var controlnodesKind = schema.GroupVersionKind{Group: "autopilot.k0sproject.io", Version: "v1beta2", Kind: "ControlNode"}

// Get takes name of the controlNode, and returns the corresponding controlNode object, and an error if there is any.
func (c *FakeControlNodes) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta2.ControlNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(controlnodesResource, name), &v1beta2.ControlNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.ControlNode), err
}

// List takes label and field selectors, and returns the list of ControlNodes that match those selectors.
func (c *FakeControlNodes) List(ctx context.Context, opts v1.ListOptions) (result *v1beta2.ControlNodeList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(controlnodesResource, controlnodesKind, opts), &v1beta2.ControlNodeList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta2.ControlNodeList{ListMeta: obj.(*v1beta2.ControlNodeList).ListMeta}
	for _, item := range obj.(*v1beta2.ControlNodeList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested controlNodes.
func (c *FakeControlNodes) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(controlnodesResource, opts))
}

// Create takes the representation of a controlNode and creates it.  Returns the server's representation of the controlNode, and an error, if there is any.
func (c *FakeControlNodes) Create(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.CreateOptions) (result *v1beta2.ControlNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(controlnodesResource, controlNode), &v1beta2.ControlNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.ControlNode), err
}

// Update takes the representation of a controlNode and updates it. Returns the server's representation of the controlNode, and an error, if there is any.
func (c *FakeControlNodes) Update(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (result *v1beta2.ControlNode, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(controlnodesResource, controlNode), &v1beta2.ControlNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.ControlNode), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeControlNodes) UpdateStatus(ctx context.Context, controlNode *v1beta2.ControlNode, opts v1.UpdateOptions) (*v1beta2.ControlNode, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(controlnodesResource, "status", controlNode), &v1beta2.ControlNode{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta2.ControlNode), err
}

// Delete takes name of the controlNode and deletes it. Returns an error if one occurs.
func (c *FakeControlNodes) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(controlnodesResource, name, opts), &v1beta2.ControlNode{})
	return err
}
