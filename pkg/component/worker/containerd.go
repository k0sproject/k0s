/*
Copyright 2022 k0s authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package worker

import (
	"context"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"

	"github.com/sirupsen/logrus"
	"golang.org/x/sync/errgroup"

	dirutil "github.com/k0sproject/k0s/internal/pkg/dir"
	fileutil "github.com/k0sproject/k0s/internal/pkg/file"
	"github.com/k0sproject/k0s/pkg/apis/k0s.k0sproject.io/v1beta1"
	v1beta "github.com/k0sproject/k0s/pkg/apis/k0s.k0sproject.io/v1beta1"
	"github.com/k0sproject/k0s/pkg/assets"
	"github.com/k0sproject/k0s/pkg/constant"
	"github.com/k0sproject/k0s/pkg/supervisor"
)

// TODO: Replace this with ClusterConfig sourcing from component initializer...
var testConfigs = v1beta.RuntimeSpec{
	Registries: []*v1beta.RegistryConfig{
		{
			Name:         "registry1:443",
			Capabilities: []string{"pull", "resolve"},
			SkipVerify:   false,
			Server:       "https://registry1",
			CACert:       "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUpLVENDQlJHZ0F3SUJBZ0lVREZGMS9YbjZ5MzhjdEc4czVqOGFBdG1mTTNJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmxaMmx6ZEhKNUxXTnNhV1Z1ZEMxallUQWVGdzB5TWpBeQpNRGt3T0RRNU5UUmFGdzB5TXpBeU1Ea3dPRFE1TlRSYU1DUXhJakFnQmdOVkJBTU1HV1J2WTJ0bGNpMXlaV2RwCmMzUnllUzFqYkdsbGJuUXRZMkV3Z2dRaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJRUR3QXdnZ1FLQW9JRUFRRHAKZ05oYmcvZis3RUh5VEhqbXpyZ1VMdHlMeWNHajhIaTJubjljZ0k2YWJWS0tHVkcxOXdZYnVkcUJLRUpYRks4egpXNUJ5cXRTcGNXdWxjNVhnamQwREo1cDZFK0xIVno0Z0JhRnpmVkdLTmNWY04xREhUcXlMdW90cEZxMGVlTjBzCktxc0EyWTdpaFRtbjVMM0lqbUI3NXp2SjB1L1FnNU1MZE1WZlFDOVh4QlJPcmx4MWtDWjlYcDMwOTRCVjBYMTcKUmhZK2tTS25xNkxBdG1UYU4wTzNCRHVFWXR4dTllRWJ5UVVHcS9pbk13M1N2c0NIN0NxSTJCaUZ2d3dkNjNyagpGWU5pUEEzWk1jYTlERy9lN3hLZWU3TGNhSEZ6M29Sa2F4RnJyc1RLMU9ZSDNVWjl0djVvbDEwQ0hzK1dPeGs4ClFPQTd0eHNTV3FpZWNHWHB5YXZFVXFtb3BLQnhxMngxUFFBa08yQUNQa2prTmlaSDNRTGpUdWEwRTNwZnhES3oKbTFxNldVYXZyV3ZzOVNqeW1QZ00wcE9ES3VWdGJFMHo0RnRVM3EwRnlYWEpuclc0cko3MDMrMTBaVGpsUWtKRgoxTTZDeHZjaXVLcjdITGpTa05nKy9aa3dHcFFOZXFiQ1E1Q2NaZ1lNdXlkM015MHU5VFhIU09STUw0VVYvSUxnCi9aUDVYcHVBUmtXaitNZFNtSUFDdzE5U3kvOGxPTURwQzF2Z1V1cUJ5MVl1N3l3K0xDTkJxKzhBVUh5VXRjd28KRHNvdW1ia3JmNldxY2FXMEFOSHNDemxNOEthb203aE56cVZnRiswa0FhUC8zRHI5cjFYbEdDVmpyZVY2UjFJdQphUG5SSFpZaWFXaHJ3WFpqZ0Y4UVp4ajdhM3FmRTRmVkhiMkdnYnVwZDA3eEExNW0vaEl1RDJieTd4ckttZ3BNCndvUWF1VEtEKzBIZHFVd1h3cVYwMGo0K0QzNkhZZjhESHllZVFGQlpZNmQ3YktIN3NFVFlvQ05ScUpoYUhSelIKaHY3cUlTOERiNTUyQTFpbmhaWTVUOXM2SzlyL2xyd3pWT0k0S0NyUGdQbVVWbWtCRWl5SkRqM28xK3dVc0lLNApNeXVjUlF4aWJjVWlzSlNXVkdMK2ZvU1MxZUx1azQyN0JiYWNaWkRwcVkwTWJrR3dLQUhIdEgvZXhXV3N5TEtWClRRbkVKNU5PeWdJaStpTFVGMHNIR1VJeklmYTdWZHRFWVJHY0phSTg1U0pLd01BdU4xV3R2MzlRWmVnNXVNdEgKbTFIOUZHOGtOemk3SUU1aDNhSCtKSEhRMjJuUTFwb0tobmM1Z3Q3UXhrdWE0RXk4d2FGbnZuaU5hc2ZpdFJIMApObnlOQlZVdDllZTd6NUpRU3hXM09RNkIzZS9jK1dMSE5nMlJXYi9VT1JWZzFRTzVueEQzTlU3M0YveGFHVFltCnRLLy9PK0ZxaENVRnQwQXlEUk15QUhTdVhKR2NFWjB3bXNQRUxBTEFQenlWS1Vqb1VUYXFid0ZBOU9zT3dDR2gKSSt2S3JnRDRqY041a1hZdFEvUDlNenpPbEpwbmNLVDJNdDNxS0JsclZqTGdJVW13Q1V4RGk4SWRzREJpeEVGdQpXQkthQWI1QW9uM0J3RzNsTVdmQXdvZGJ1MUpLeko1dEtaQmVONUJ3WTlTekthNWI4djE0bkRJbnU1Nkx0dFBQCjJoQlQvQW9sMGRPcmVvK3lCMndzSTBjOWdiR3RLQmZjeVQ2YlRQOGRSSDNMOXlzOGRYdlFkZU9FOUNHR0FBbnIKMTlPWXVTcEdXdmNvYnhnQjVnbkpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNBN3VsRE5CcmR3aUd3aGtPTQprZ0dLQkFNay9EQWZCZ05WSFNNRUdEQVdnQlNBN3VsRE5CcmR3aUd3aGtPTWtnR0tCQU1rL0RBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJRUFRQ0xYRWRuQThJYVVGV1M2RUVkZnJvaytWSkwKZVVhaCtJSHpEcElsWjBITkJuaERiQ3M3ZTI3bC9SUm82aG40cGJEc0ZwSHk5WTArajJZSDBnOVBGbERuRDVDZgpvUGhEcFM5VkJqUzZUMjZrUFdEeFdaMHA0am9sMzZKYjZrcnU3Vy9qd2d1Q3hGczIwRlhWWFphSkU1UkVjOXNXCjhOeXBtMi9XcDJUaVVxMmN1UjFHaDZUQzYzbEZTZHhuZGRlaVZZYi80eVFMK1RZY0RyK2lxWWtoaWlibVRyWEkKWU9nVlVqbHhVdTdaQktyTjkvMzhMbnBKZDUwWTV0UkYxWDVGNGwxL1N3ck53bkZwOThWL25qVUhxU0M3SzA3bApJMmhRTTZCR1dCUm94S1ZyWmdhUThjTXNEQjg2QytEV0JYYWJZNHY5bmVOQ2xDQU5YcjlYb2QrYmlLM3oyWnNmCm5LalJjLzRQQm8vc1Q0SXM2U01CZGViTnhJbFZXMzRyUm1QWHd5QW5oSHRucHlYK3l2aldTb2FjVFpQTEJmd0gKUGp3elpYdi9zOXpYZENXbXVHaFRKVXBwaWxra1d1VkRrMEoraWo1Vnp5YzZnSnN4Q29Kc1h4dmpoRXJtaVRUeQpZdWw4WXNzdG5JQzg4dDB0aE5GNHlXaElQNjVEQXEwb1Mwbkh3S1RsS1BCSFZmZEhybFM2SVRaZzJ1ZVROV0RVCjgxL3BVVkV1U0xPeWZ4NklPcnVUb1dTMnppQVgzTlUrTUhPT3FYbEx2ekJGR1VKMytsc1pScVlCNnhiUFU3Q3MKVERCUUxOWXhzREYxYlJ0T1U1MU1VUnl4QkR5MENSQUZ3NzlQeUFlT3gzRDlVaXVpclRYcE9XQ2Q4YmhMZjBSMApia3krSDZjTDkwRmh0NWVHRHZPTmUvbC8zNlM0RndTREpndmVoQzFabFFDM2VaVmRuUTFSa2RDWXZVQy9MMVFjClNKU3ByM0FIYyt5d2JySWZPcVRrUEY5L2MxOXFFSlFwSnNsZldMRThYbFlxYXRueThBR2U1eS8vdlIralY2WFEKNEhPdHNsc3F5eEdSR3daSGkyK1YzRDFtVFRzQU4raGtOcWxzU3R6VGFBSmVLbGwzenJvNGlhUENKKzh4bHlqWApEZSt1ZWk3THBPa281cU1vb0N6TENUSWlVN3FtODgvY05XYWtTL1ZVOUJLSUZsSnFqM2ZBSlRtSHhDUnBKU2c5CkltTHZCbjllSnZISmFUR1B2TWpvVENrV0YrTVlVdjVTTXlEbHhiQkN1ZUhORUxldzl2QVpXSXRyMnlabFNDNGIKaUllaFZ2V3EwZk50YldNNnAwQytVejkvL2ozU21QUmpQeHlvTEhHNjRjVXRTQWNRYlJRaWFqdElSa3hIV0FORApYa2NjblhaeFRzZHhETDRkRTVnVzRBckNsUmFFQ3d0NFhBQnhPeStuRk05QXFNemNnWUt5cEcxZ2h1ZWIya0dMClJ6ZENyMlN0UEZMRUhiYUxDUmVRS09XV2JYZTBsb2s4UWZOQVo2c1BZYTZ6cjQ3ZU4yQnRYZ2wwVkRmV2V2aFkKR3MrOXNpTDJqdng3TEt1SU9WYWZRQWlPMlVNKytVZHBsYUZUWVgwb3dNb0N5U3NZWUUveis4ZzZPdlFLOG9aNApUUU54RDBxd1RFL3hZeStkaytiSG4xT3M2YnRoVmszMk9HU2ttMmNBWm1wM0M4SU9nYlpmREtCUldQbU5QaXBnCmZNRWdvWTZNSHFsSnFOcFBBS1ZtTnFBKzdnVGpVaDlORUkyUnVDcnppTkRJZDhHSzhrd3huSTRoSm1ROQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
			ClientCert:   "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNVENDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBS251eWlCbUVQK2xvRDM2OTg2ZTFLTnZ6bUZLejgrenVCRWoKN3orOUcvUXJqRFhybDNMaStjbE0zZGFCemNKRmIrMHZKYnY0ODdxVWc4a2tIalozdlk1aDRTU3lQZnlrK0R0cQpDNTZKWW5oTHVXT0h1cVlNN2I3OVkxYTRMSjErb3ZpS1d4ZUZWdVJhbmFHQkZNaC9kakRCbzd6cm1uRFAxYUJTCnk3b091VWE4ZnV1YmhtV212UTBSTllRcHA2SFZnekcrU1dpN2ZSRzY5OU0wTUVKeHVWQTd5ZEdaYVFJL1NMQjMKNk1wOXJUM1poaXN3b3NMSGZMcU8rSEduQ3R6YXdEcXhtWG5KSEZqRTJOQk5yZmJYZHQwaEwvcFFWSFpUY1FkKwora1M5aFZtazV2WkxUd2RLNXlnRHU4d0pGNE5QcUlCU3had3oyOTR0TmVicFB2RWFOaGo3SjcxZGs5Y0VBalBJCjdxTjdQbjlGbGh2eHFpMVFYNFdsdEx5MUd4K1duTnNpSWRyeWFZR1pnTHJqbEs4Vk93MmtqbzZPUkwzQ1BIc2MKUTFSZ21RMVl1TFZ0MjZ3M2ZNMDRJMDUwWG5wSXVGSG05S2VrQStpNjdXNXRKbExuSUlQWmw1dDNkWnhnWFlsTgpOTzRkUXRHMTdoSklQMVdNSzdDcTdva2E0Q21rMjRQVVVaT0VyUVRVM09RS2dGS2xwdEFmVk1UODczTVVQR2tVCnA5NVc4cmtSaDdydXErRy9peHB2Um1ZUW54TXJvOWcydzFhZlFOSUMyUzJQR0R5Y1ZXV1dkVmp1QStEZ2dWVlMKY2tuWmtDQjdKY2hmVW1CMjJHYVZHb1NoWFN4ek81eEtxdENBdWh1Z2JDNDIrOCtVSmY4d2VnS3J6QjZUN1FDSApVbzN3Z0YvOUFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU0zeWRpMGFKbHFpS0hlWjQwLzlZVjN6CjE4L2QxazhoaW1KT0Nzak05MXIzZVVHS3Jyb3U4Y3BFUXlzQy9GbVI5anpWN0dPUmlUREpvUERybmgvV0RzRTYKSmtDRGJObHB4bjlOK2phSTl4YnR4Yks3MmJmbXR0WVk1dkNOTHR1bHNhdUc0Y3YvT2FrNGNKdnY1L1NaTmZFNgphTzNnOVg1UHc5MGdFT3NIS3VUZlk4ODR6NjRpQ3FyRGNDS3Q3cE1WNDBkSkwrb2hwRFFvR3dGRE90bERSa2lNCkNBQUpIbU5ZVlQxRnJMTFNHdStwQWdNbWpTbnNyUGNPNHowcEFZUjRRcGRzclQwa2l4K0t1bUlrWGJsWm9MTm4KcCt1UlF5MW92YWVsNkRlVzdvZlBMQy9sQU9pUkdIdkRyZnBaZlMvVkFCNEdCUytlYXkrU2JNSEcvWmdDbk5pTQpELzFmTlhtdGJZNXpjQ3NESTZ3TWNwRnZSSE5qSEZrNEI0cjdBYUpmQ3pka2Jlbk9SZEV0eFEwL2kwbXMxWktRClJhcGtESXNjTmpBczJsaElmSjZyQWZQN2x6SFBjeGNydk1LYnEzQTBoVThpRi92ZUVoS2MxZGlnU2ljZlhIdTAKcFl0T0RVZTVTZEF1V3dUNk00dDRvZjNLMWZxajRsVzNjUlpJRGFnRC9OUWtCUnFaSkZIT3ZvbWhmZklmbS9QVgowd3E1cEVFTlFaUytSVkJ6dmxrWUxWNHJ3Y0VvN1gwU2RpeVdNbmxRTVpXL1JyKzVKN1orV2kvOCtOYk5uK1FzCk1PMHNyN2gyd2QrRFJiL2RxSmxJcWJHMkFHU2lrYmZIVWJQL0d1WTd5UVJpV2ExL29rbGZnREV2QjJ3OGpXek8KVnEva09lTjZocmRDdCtLaExRbXVLZnZtZm1iRnYzWnc2NXIrbU1YTk50NWQwQU04RE5XdTQ2L3dkRkZ1Nk8rUQpXZ1NxZGNvMnJpTXRJYmxpUngrdnE0N21XNkNmaGZrbmVScWtoTEhKQzBrd0FkUTlMRWxGa1ROR0l4M01FblFuClN6dUg4Mms3V3U0elllbGFUMWVNK0w0UHZoTW1xc0IxdHVIYmhaaWJkazBDTVdDcVptNmdFaitaQ3hlK3hYQ3EKMTlYN3J3UmkvalQxYWZaV2llRFN0aU0vQ1ZXNEZZbnYvcEVlTjJ5TVZTaGgxN2ZwazFNWWRVcHU2N2dTK1gyWQozY1pOYVN0b0tpeG0rRE5QTGdCcXdqdGdoeThkOU9TK3UzVGV0TzZlMHFjckYyU09tMy9XcU4rS1JWNGVkOWxiCnR0b0ZwRzF0YnkxaHlYc241TG9Ca0hMUW45MUtOYXo5KzFVdmRGcFFaQWZacGJWNUtUcmJFRE5rSlIzT085YXkKeWEyNDdpU3NnbzBXbGZMTkZUdjUzWWtHOUtvdGp4b1VxNVZ5U05pc1h6a05Ec1F0Mi90Nk94cjRyU3RoOGhaQwpmSkFnRnJtTlJ4WE8zelZOSEFKdktmTnpGNzltWVVFb21IVWhBcHgyU2puK0hUZHJkLy9hMDdVVS8rSFlONnpiCnI1RU5QZDFSSU5SS3pCcFl3azRQL3hiRzlES2VXbTZoVFA3RkxBVHJSYXVxTVdYK0pobTRGM21QMlN6cWl2NGoKQitRTyttTGd5UDVUaFVLeVdhMkZXakFrSzRIa3FhMGZDQnYycmdwc1QwV3I4Y1IvTDJrYjJiQ3lEL2lUdmU0KwozNWh4MHM4Z20wZ0E4eXFVSklYVEhoZW5Yd2hpdHhtOG9lSDFtVUJSd0g0MGMvamtkaWQvWmlXdXlxWlovS009Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
			ClientKey:    "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBcWU3S0lHWVEvNldnUGZyM3pwN1VvMi9PWVVyUHo3TzRFU1B2UDcwYjlDdU1OZXVYCmN1TDV5VXpkMW9ITndrVnY3UzhsdS9qenVwU0R5U1FlTm5lOWptSGhKTEk5L0tUNE8yb0xub2xpZUV1NVk0ZTYKcGd6dHZ2MWpWcmdzblg2aStJcGJGNFZXNUZxZG9ZRVV5SDkyTU1HanZPdWFjTS9Wb0ZMTHVnNjVScngrNjV1RwpaYWE5RFJFMWhDbW5vZFdETWI1SmFMdDlFYnIzMHpRd1FuRzVVRHZKMFpscEFqOUlzSGZveW4ydFBkbUdLekNpCndzZDh1bzc0Y2FjSzNOckFPckdaZWNrY1dNVFkwRTJ0OXRkMjNTRXYrbEJVZGxOeEIzNzZSTDJGV2FUbTlrdFAKQjBybktBTzd6QWtYZzArb2dGTEZuRFBiM2kwMTV1ays4Um8yR1BzbnZWMlQxd1FDTThqdW8zcytmMFdXRy9HcQpMVkJmaGFXMHZMVWJINWFjMnlJaDJ2SnBnWm1BdXVPVXJ4VTdEYVNPam81RXZjSThleHhEVkdDWkRWaTR0VzNiCnJEZDh6VGdqVG5SZWVraTRVZWIwcDZRRDZMcnRibTBtVXVjZ2c5bVhtM2QxbkdCZGlVMDA3aDFDMGJYdUVrZy8KVll3cnNLcnVpUnJnS2FUYmc5UlJrNFN0Qk5UYzVBcUFVcVdtMEI5VXhQenZjeFE4YVJTbjNsYnl1UkdIdXU2cgo0YitMR205R1poQ2ZFeXVqMkRiRFZwOUEwZ0xaTFk4WVBKeFZaWloxV080RDRPQ0JWVkp5U2RtUUlIc2x5RjlTCllIYllacFVhaEtGZExITTduRXFxMElDNkc2QnNMamI3ejVRbC96QjZBcXZNSHBQdEFJZFNqZkNBWC8wQ0F3RUEKQVFLQ0FnQU1NYzJoZTVHV3R1MEQ1YUdvMnk4Sk4zbkk4NVJzSkVwK09HVHYzd05GaDJaOWJCV25NZkNZNklJMgo1WU85Z0R3aStqSXNCaFovZWk3bTNVZXB3dmdBWXJmRWFXSVhZa05LQ0RjalBscXBwVTE5ZmZ6Lzg0ZVFJQ0RqCjFUMm1ZN01RUU9WK2o1d0hzUlVFeFAyWDBjWEtnK3JiSU5FcGJWQzRPNWpSRmtObmR4bG9rUFdaRDlrYk9mUHMKTXcwTGlRWHNLT3Fkc0c2dU9ndVV4WGI5SGFvZHZ0eWh4TytMTUwxbnBJTTVITUcwNFlwR1NTdzA3Qm5nVFdnNAp4N0w0M0YzVkdHK2FGTHVMQnoxRDNYOHhhbzdtR1g2VzZQTFd0dkF5aUlNdk1hYURJMWxMcldYVGNTV2Jjb0VrCmlEWit2dFdwdDhia2liZ3FmbllTeHdRMFN4dzhtc0hzcVlIOTgzWE9Na1kva1BoZkFyZ3JOWUdKUHVGZnprOVgKNnFMZ2tYaCt0eGtEUDNuaWNjcURZQVVMdHBleWdQeU9NZmFia0dWTFhuS2Y2aE8vTVBQZy9ITzhPbHBGeTV3TwpiWDRXM29EODAzR0FzOGlvNGpUN3Q5YXdFU3lIUnFWV0hXNDdIdFVxZDVDQjRmbEo2QzN1dmw2YW5VdGZ4RTh1CkFLYTRNeFRnMm1VSDlJV2ZvZjFwWTh0L3ZKMmVKdVZkSW9rUmhCYkJwckMyQkJ5MjlTTTlXVjQrWk1vZWRndG0KTENEUHQ5YXgvdlRpTEpTUGdkRDVyZ0tyVU4rU095cURJaWhWTUNiZnpqVWxUT3AyVW9DcXpub01DTHo4ei94dgp6SWhYSk96YzNYb3Bvc05jZWloWlZhZjQ5M0ZrOS9BNm16ZDRNc3h4WlVNQ3BMd2lRUUtDQVFFQTBTcUNkam5ECjFKVHY3cUxUY3RFUWxGMnR1S3hEYzFVMy9icnFvbkpONllSaEdxRnRZTEE2a05YblA2TVdEcW1OTDVIQlRLUWYKMFc3bjdpUERCa3h0SHVsNnFMcENKSWFlcWRXS1dwZWl0M1RoL2prbXEyVm81ekUrbUhjTVQzb1hFS3VzMnNCWApnTFNIOXRweGZYY3NEU0h0MVRjc0FtL1ZNaVBjZkRwR3ZRN2Z0Nk9MUVRwTGVpdGRGdWZJZ0R5YjFrWEtkM1dSCmFRQ3dsMTVpWGlyRytsNFVWb2JrYmZxdktkdWVvbDRGbTgraTEyZmVYQ2hNV1VLQzN4Uko4bUZERGtmK2hWL1cKSm96WnBUaVZGMDhOQk5JK0x4M1l0THFKNEdkSDFJMEJDdXdyVUEyTTVFU3I3ZldDblh5WHpkOWhkZ2RKQkZBRgpUcnBTc1ovVE16SHRVUUtDQVFFQXovdHBNL1ZaS1hQUTFLcFJUTnFFa2MxNUVwTm1xQXI1UDByY0NRazFtTW5kClpHOG5ZTWZzbzBLaDIveTNlVHl3ZkFHVS81eEp1MmxnUHAzeE9lQWdLUmc2WHZsc1d3RVBleGpNNDVaZ2IxdjMKK0JDVFBzT1dKdXFmWDlrL3ZjYUVJSlNVWDlVeEFJVzNVcGxWUGlIOElPTFlZN2VhRHFraEFCMnJET1FBdnVwcgpicHU1UUNhUU9VVGJoNXN0akg0SDF2NGFRdktPdERNd1U4b0VjaUNyRUNGTHhEUUdyZWpjREZMNjEydVM0MXlTCnNLL3hkYnUxWVVaWnZ2Y3hWM0JZbVRxUWJMS3FhRTAyTnh1VHFQU2pmcWU3T1pOaE95emJFd1VDRVhJdVJ5ajMKNXBUU0h5ZEJ5QlZESkVrRjFpYVdRTGwxZXJ5R2N2RUZtTzJ2bURIczdRS0NBUUVBbHZveEt6Y3M1R0FSQTlaaAovQ2x0NXpuck1EYWZoVHRJN0F1a1cxZFlaNnNYRUVyZkVZQ0M5WktBbGMyWkdVSkhWOFBFbkJhSHBQdUJ5OEhpCmZzUmhxNE5wOXlwaW5jelI3OUxrUjluV0tNZmtiRVZDWlVzUXVuZ3dMNHNXeHJOZ3ZMYStVVE91dFljWjhSUGkKQVdjbzA5M2V0eDFZMWZWMUZQa1BxRmZFUWFqZjBNVHF1azFpdDY5ZlJTNU82a2xWVHdnWFNiMENGYUhhMVpmYQpOeEIzaWJhb3hZQWVtRWZ2Y2E1RnhmdEozeHF6OXZuUlpnSHNnaTFoRzdhZ1hhVFk2eEVLWmFrMGdhVC9ZS1FECjhjd3NvSU5GUVdzd3hkc3p0RmU0WUhMYkF0QlB2enZZcTlmcHBoeWxpQm1yMVgxYzh2MzFOWGl4TEErUHF3aXIKUVBQVDBRS0NBUUJIU1ZZSzBCcUtnYjdmVmExZUdUdjlPWjg1QmJyVytFUHNOTDFzZjNLV2R3SmlUVk1DOGlPaQo1ZERTdFRFeDVlSmI3ckxpVmZCVHcwK1F4dFFLMFU1VXA1QkNRMTJuWjVxbHg1OWFsbzFoUGZXbFdoRU9IejNWCkF2QXppeVEwNk5rYXpiSjVrbm9rUXJET0orNDJ5TEZCbUY4dzlwcGdVZ29VbnhhazZYVnorcWR1RndRTS8rckoKSmxmVWlCUzVwZTBML0xhRm9kdlYyZ0hEaG1lMXNvclBrWW9GcXd0ckNuaDU1T3REY1FTODExc1VJb294bjNBUQo4bXNLY0hIQ0ZhalloR0ZDVUk3bUJ5a0JCSHU5R25UN2tZUXp2TmREMENFYXlNbW5yeW83aThoRWlWZm9BNjJoClplQklqSnJxaHZsVEgvNHJYbmo2NXEvVGRneU1ydmdWQW9JQkFEQ0ZkeDh6aXZxL1ZINnJyOGFENVRQMUVucGMKVUo4cDlnbmtNdjRVS0lhbzhscFcvZGViN0s0dno2bkRXSEkySWZlOHZwWGY4bmxYMVd4bkdubzhXSVVDWng5MQoxREl2c0pXNjZnYnBYWWJWV2RJN3NFL0xNa0MxLy8vamMxd1RUOHhTVzV2c2tjZmdPN0JuSmZzaUh4aXBPRGJZCnhEL2pyRStrZ1pURkxjdExPMVQ1Zk52bWRsZlRJaU1pQ0dsOVRTUnp3TVgxb0JtZUNtU3Q5LzVwY1hjU2lnY0MKMFBtc1BPRFlJOGlRS1ZLc2lwTkRwVVlTSW0xZ3JiTW4vMENWVVYrTkdoSng2dTd2R0hDejl0NWVXdjJxa09oRwpnODZoS0QzRkh3dVpWU1laVmJGSTN6NnI3S2RKS2RmT3RlQ1lMK2doMStYcGM3WXNtQzFBay81UERyOD0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K",
		},
		{
			Name:         "registry2:443",
			Capabilities: []string{"pull"},
			SkipVerify:   true,
			Server:       "https://registry2",
			CACert:       "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUpLVENDQlJHZ0F3SUJBZ0lVREZGMS9YbjZ5MzhjdEc4czVqOGFBdG1mTTNJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmxaMmx6ZEhKNUxXTnNhV1Z1ZEMxallUQWVGdzB5TWpBeQpNRGt3T0RRNU5UUmFGdzB5TXpBeU1Ea3dPRFE1TlRSYU1DUXhJakFnQmdOVkJBTU1HV1J2WTJ0bGNpMXlaV2RwCmMzUnllUzFqYkdsbGJuUXRZMkV3Z2dRaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJRUR3QXdnZ1FLQW9JRUFRRHAKZ05oYmcvZis3RUh5VEhqbXpyZ1VMdHlMeWNHajhIaTJubjljZ0k2YWJWS0tHVkcxOXdZYnVkcUJLRUpYRks4egpXNUJ5cXRTcGNXdWxjNVhnamQwREo1cDZFK0xIVno0Z0JhRnpmVkdLTmNWY04xREhUcXlMdW90cEZxMGVlTjBzCktxc0EyWTdpaFRtbjVMM0lqbUI3NXp2SjB1L1FnNU1MZE1WZlFDOVh4QlJPcmx4MWtDWjlYcDMwOTRCVjBYMTcKUmhZK2tTS25xNkxBdG1UYU4wTzNCRHVFWXR4dTllRWJ5UVVHcS9pbk13M1N2c0NIN0NxSTJCaUZ2d3dkNjNyagpGWU5pUEEzWk1jYTlERy9lN3hLZWU3TGNhSEZ6M29Sa2F4RnJyc1RLMU9ZSDNVWjl0djVvbDEwQ0hzK1dPeGs4ClFPQTd0eHNTV3FpZWNHWHB5YXZFVXFtb3BLQnhxMngxUFFBa08yQUNQa2prTmlaSDNRTGpUdWEwRTNwZnhES3oKbTFxNldVYXZyV3ZzOVNqeW1QZ00wcE9ES3VWdGJFMHo0RnRVM3EwRnlYWEpuclc0cko3MDMrMTBaVGpsUWtKRgoxTTZDeHZjaXVLcjdITGpTa05nKy9aa3dHcFFOZXFiQ1E1Q2NaZ1lNdXlkM015MHU5VFhIU09STUw0VVYvSUxnCi9aUDVYcHVBUmtXaitNZFNtSUFDdzE5U3kvOGxPTURwQzF2Z1V1cUJ5MVl1N3l3K0xDTkJxKzhBVUh5VXRjd28KRHNvdW1ia3JmNldxY2FXMEFOSHNDemxNOEthb203aE56cVZnRiswa0FhUC8zRHI5cjFYbEdDVmpyZVY2UjFJdQphUG5SSFpZaWFXaHJ3WFpqZ0Y4UVp4ajdhM3FmRTRmVkhiMkdnYnVwZDA3eEExNW0vaEl1RDJieTd4ckttZ3BNCndvUWF1VEtEKzBIZHFVd1h3cVYwMGo0K0QzNkhZZjhESHllZVFGQlpZNmQ3YktIN3NFVFlvQ05ScUpoYUhSelIKaHY3cUlTOERiNTUyQTFpbmhaWTVUOXM2SzlyL2xyd3pWT0k0S0NyUGdQbVVWbWtCRWl5SkRqM28xK3dVc0lLNApNeXVjUlF4aWJjVWlzSlNXVkdMK2ZvU1MxZUx1azQyN0JiYWNaWkRwcVkwTWJrR3dLQUhIdEgvZXhXV3N5TEtWClRRbkVKNU5PeWdJaStpTFVGMHNIR1VJeklmYTdWZHRFWVJHY0phSTg1U0pLd01BdU4xV3R2MzlRWmVnNXVNdEgKbTFIOUZHOGtOemk3SUU1aDNhSCtKSEhRMjJuUTFwb0tobmM1Z3Q3UXhrdWE0RXk4d2FGbnZuaU5hc2ZpdFJIMApObnlOQlZVdDllZTd6NUpRU3hXM09RNkIzZS9jK1dMSE5nMlJXYi9VT1JWZzFRTzVueEQzTlU3M0YveGFHVFltCnRLLy9PK0ZxaENVRnQwQXlEUk15QUhTdVhKR2NFWjB3bXNQRUxBTEFQenlWS1Vqb1VUYXFid0ZBOU9zT3dDR2gKSSt2S3JnRDRqY041a1hZdFEvUDlNenpPbEpwbmNLVDJNdDNxS0JsclZqTGdJVW13Q1V4RGk4SWRzREJpeEVGdQpXQkthQWI1QW9uM0J3RzNsTVdmQXdvZGJ1MUpLeko1dEtaQmVONUJ3WTlTekthNWI4djE0bkRJbnU1Nkx0dFBQCjJoQlQvQW9sMGRPcmVvK3lCMndzSTBjOWdiR3RLQmZjeVQ2YlRQOGRSSDNMOXlzOGRYdlFkZU9FOUNHR0FBbnIKMTlPWXVTcEdXdmNvYnhnQjVnbkpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNBN3VsRE5CcmR3aUd3aGtPTQprZ0dLQkFNay9EQWZCZ05WSFNNRUdEQVdnQlNBN3VsRE5CcmR3aUd3aGtPTWtnR0tCQU1rL0RBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJRUFRQ0xYRWRuQThJYVVGV1M2RUVkZnJvaytWSkwKZVVhaCtJSHpEcElsWjBITkJuaERiQ3M3ZTI3bC9SUm82aG40cGJEc0ZwSHk5WTArajJZSDBnOVBGbERuRDVDZgpvUGhEcFM5VkJqUzZUMjZrUFdEeFdaMHA0am9sMzZKYjZrcnU3Vy9qd2d1Q3hGczIwRlhWWFphSkU1UkVjOXNXCjhOeXBtMi9XcDJUaVVxMmN1UjFHaDZUQzYzbEZTZHhuZGRlaVZZYi80eVFMK1RZY0RyK2lxWWtoaWlibVRyWEkKWU9nVlVqbHhVdTdaQktyTjkvMzhMbnBKZDUwWTV0UkYxWDVGNGwxL1N3ck53bkZwOThWL25qVUhxU0M3SzA3bApJMmhRTTZCR1dCUm94S1ZyWmdhUThjTXNEQjg2QytEV0JYYWJZNHY5bmVOQ2xDQU5YcjlYb2QrYmlLM3oyWnNmCm5LalJjLzRQQm8vc1Q0SXM2U01CZGViTnhJbFZXMzRyUm1QWHd5QW5oSHRucHlYK3l2aldTb2FjVFpQTEJmd0gKUGp3elpYdi9zOXpYZENXbXVHaFRKVXBwaWxra1d1VkRrMEoraWo1Vnp5YzZnSnN4Q29Kc1h4dmpoRXJtaVRUeQpZdWw4WXNzdG5JQzg4dDB0aE5GNHlXaElQNjVEQXEwb1Mwbkh3S1RsS1BCSFZmZEhybFM2SVRaZzJ1ZVROV0RVCjgxL3BVVkV1U0xPeWZ4NklPcnVUb1dTMnppQVgzTlUrTUhPT3FYbEx2ekJGR1VKMytsc1pScVlCNnhiUFU3Q3MKVERCUUxOWXhzREYxYlJ0T1U1MU1VUnl4QkR5MENSQUZ3NzlQeUFlT3gzRDlVaXVpclRYcE9XQ2Q4YmhMZjBSMApia3krSDZjTDkwRmh0NWVHRHZPTmUvbC8zNlM0RndTREpndmVoQzFabFFDM2VaVmRuUTFSa2RDWXZVQy9MMVFjClNKU3ByM0FIYyt5d2JySWZPcVRrUEY5L2MxOXFFSlFwSnNsZldMRThYbFlxYXRueThBR2U1eS8vdlIralY2WFEKNEhPdHNsc3F5eEdSR3daSGkyK1YzRDFtVFRzQU4raGtOcWxzU3R6VGFBSmVLbGwzenJvNGlhUENKKzh4bHlqWApEZSt1ZWk3THBPa281cU1vb0N6TENUSWlVN3FtODgvY05XYWtTL1ZVOUJLSUZsSnFqM2ZBSlRtSHhDUnBKU2c5CkltTHZCbjllSnZISmFUR1B2TWpvVENrV0YrTVlVdjVTTXlEbHhiQkN1ZUhORUxldzl2QVpXSXRyMnlabFNDNGIKaUllaFZ2V3EwZk50YldNNnAwQytVejkvL2ozU21QUmpQeHlvTEhHNjRjVXRTQWNRYlJRaWFqdElSa3hIV0FORApYa2NjblhaeFRzZHhETDRkRTVnVzRBckNsUmFFQ3d0NFhBQnhPeStuRk05QXFNemNnWUt5cEcxZ2h1ZWIya0dMClJ6ZENyMlN0UEZMRUhiYUxDUmVRS09XV2JYZTBsb2s4UWZOQVo2c1BZYTZ6cjQ3ZU4yQnRYZ2wwVkRmV2V2aFkKR3MrOXNpTDJqdng3TEt1SU9WYWZRQWlPMlVNKytVZHBsYUZUWVgwb3dNb0N5U3NZWUUveis4ZzZPdlFLOG9aNApUUU54RDBxd1RFL3hZeStkaytiSG4xT3M2YnRoVmszMk9HU2ttMmNBWm1wM0M4SU9nYlpmREtCUldQbU5QaXBnCmZNRWdvWTZNSHFsSnFOcFBBS1ZtTnFBKzdnVGpVaDlORUkyUnVDcnppTkRJZDhHSzhrd3huSTRoSm1ROQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
			ClientCert:   "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNakNDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTmVJMTV0MU5GdTk1MnZ6STZRNk56N0RwRHUvVUFaYTFkcWsKd3lYNFhlUStYVGlNMHRxdEdrZTVGUittbThuUzFUY0ZjdDR5cHBCRTJBSzMxUHAzamhoNGxIQVc0SUdwTnhLaApxWWsvOVg1TXZoWHlrQWVCMTBJZkNidnNOL0dXZ2JDY1Y5eFRXbnA2VFFNRXVpSHY5TkZ0aU1qZm41ZDFuVlcrCmVJQVE5MUt5R2hiYWxobXhGaEwvQXNXZ0ltOHA3YlN3TjlDWklaQ0k4YnZkeGN3MWZiMS9kWVhKbnpUN0RyUUQKSWMzYU1tc3c4RGpxTk1Xek9XdlNCejA2eVlBdkJkMXhVT3hkc2lTOU84UzVNSm5jU1R1ZEVUSU5KcUJPTmRMaQpSa01CQnBVcDIzemZwWU5UMnplZFhaV1hBeDZHeTFLWFBOaWt6cGs4bGE5SnUvTjZFWWtlOERoZnRRcjZRNVgzCnRVNVFBTGtLY3Z1SjI0OW5GbEZlYzRRaCttMjRCSzVDTEZLeEhaU2VRYlhXZC8wM2czeUs1R3JTa3RRalZPdEgKb0NLZldhV0tpdFVoQmdvV2tVbFpIUnZZQzhyaThuM3BVMXlUdFUvZUVVWjc0bmQ4RGowWS9XVCtDckdHbFNSQwpDMHRXSEFuL1JrNUszOUh3VjF3ZlB2Q1dNb21DSW04MHpqeW1HQ0szZ29DQXJBbERGZW05NGoxYzhtRXNIUGNxCjlEcWVWd0pkemVmMEl1Yjd3R2ppUGhVODJjbWpqdlpFdlhlUXIyV091RlBsZ2hnaElqK1I1T2h5WmlUdXdUeE8KTUZ1U3IzMXg3R3doU3lIVmVoZklQUUZYZ1lHbWEwSjIyRXVxdzJzbDA1VlNBTGlnNTUvWVZQMk1jcU9GUEpVTApnUHhpM0thdEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU9OZG9uTnQwUXJaT1gyL1ZMbFNBMFVzCndPRFMwNkNrL2NRZEorSFBYemRjc2ZCQ2VZcElNTGNhVWhETlByUUJsSjZZNjB5QUd4UVlFMjFUcGY3a2xnZloKNXF1UFRxYjQ5cWt1a3ZFOXArTlRnbUtKeVRTbVNzZCtXN3Rha0t2RVAvRFVvSlU3RHRiQVNVZTl1eDZhbndKNwpybFJ1ZGdPZHQ5aXBtK1k0blpWOEE3L29SVEpKM1lDTjhiWDlVUXlwNHArQXl0Sm1kaXRQSFE0bUtPRlI2VnVwCmMxTjA5bDlYeEdLR2lVVEtyVU1BZUwzVVUwbHYrM0xxZnlLQkErUkxGZkVqa1dsbXdNUlM2SFhvUkprQUx3N20KakRUTy9MYWpQODNoaS9Ibmp6di9CKzlOV1Zta3FsT1h1UCtVUHZEdXNzSTVJQnMvZ1ZKWGZsK2pwcFhxSHpZeQo0UlVLSlc5UCtVUHBJMlovN0RXcm1VMzZDaHFudG9DMXEyVHMwcGJWOVdCREt5cTJpS3dBaFV3akhRbzkrTDcxCiswNW9GbmNCWDA0V3RkZlVoME9lNXZxVjk0OTBvaVhRMS81b0FDL2dIZENjcFlaQnRsalJaN2hIMGlNMHVhNy8KRlpkL1NDZGs4VGhPanlzSEZVc1FZZldPd0RpOEZteS81MStqTFozQnZ4N2hGTk9TL2FnSzVBNzBObDQwcmxSagpvTVhBTFphcldrYStMaCt2YkE5M0JCemZGa0xScXZhaHFwSWZ0eE9yNzBTbDZ4QzhTQXBkK1p3TGNYM0k0c0V5CmZrbFg0RDlWRVFsZHZEMkdjMFNLclY3MVRqQzhUdmZUMElhQWEvN1dZK3dTSC9lRUZYT0JpNC93azFNaGRrVGUKUUN2RnBCODl0dGsyM1YxbWdaeWJwbmQ5cnZ3K2N6MzJ4VTJuN0YvaWlZN3JXdThYblVoVmdBVzBKdTZXdmd6dgpNdTdpSmpCTzQ4cnNYZDRuREY1eDVtaHZEUG5RdFFPaER1enN5anVyY3ZGUFVCcDVhSFhkRDJFQTYxb0hSWUtRCkR6ejZyaU5kYnVsbGpTWmVSOHk4Qnk4L3hWc1E2elFIamtnZkxMNldId29nQUNjNlhYK3ZOVGt4eTRPQ2E3Q1UKcGtiaUlmSmNtRCtiNEJUdEY5T1Y4VU05a0NDLzNiWXhnYjZtNDgyMHB0SDk3QVp6a0hrQUREa1VwdFUxamIrZQpRenkrNzhKODM1V1BQbVc5Mk5WVE9QZ0VVcGZyV1lIYUVNQ0VvYTllbi93RHRQSnVMamMxUEdDYzlCS3BoczRsCjlqckc4WHpyVkJpcFptQ1kzZ20zL2xqY1I5WU9iOHlOZ3p1RnFjYlRnT01jTjdWd1kyU0tubVJMWkJ5ejc3L0EKd0tjN2NRK3VyS1BjSWU5UkNMOEVHSzhtQUE1STVhczJab0Jkck0zRFlwbndLOVBjbHJBWFFWMEwrWktzakdUZApKSUhHMkpDdUxHaWw5d1VlcFRRMkNhanhFMnJlSkNBNEJaZmJubEFCY0h0OExYUjVucm5vY2FMaHozWjBYUC9HCnlka2xYVFhvZmJKQU5ndVFZZHZSOElpN2JCSy94VWVURG1EUGFOeVBRelpkUGcxSGpDbjRyOFNYU1FlYVV5NlYKUkl6Y0Q2NCttU3FhV0ZIU0dhUTVaT1JiTk5wMkYyWHdjL0FvdEpJQzU2SHh4YU0xYUdHODQ0LzM4ZnYySkl2agpNWWwyLzFETEoyMzk1aVF4ZW04YXNmVHg2S2RoL2FVSjFMZE1wL2kxeDJrOTZDQ2FacE9wdU5GbDJvaGxBcjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
			ClientKey:    "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBMTRqWG0zVTBXNzNuYS9NanBEbzNQc09rTzc5UUJsclYycVRESmZoZDVENWRPSXpTCjJxMGFSN2tWSDZhYnlkTFZOd1Z5M2pLbWtFVFlBcmZVK25lT0dIaVVjQmJnZ2FrM0VxR3BpVC8xZmt5K0ZmS1EKQjRIWFFoOEp1K3czOFphQnNKeFgzRk5hZW5wTkF3UzZJZS8wMFcySXlOK2ZsM1dkVmI1NGdCRDNVcklhRnRxVwpHYkVXRXY4Q3hhQWlieW50dExBMzBKa2hrSWp4dTkzRnpEVjl2WDkxaGNtZk5Qc090QU1oemRveWF6RHdPT28wCnhiTTVhOUlIUFRySmdDOEYzWEZRN0YyeUpMMDd4TGt3bWR4Sk81MFJNZzBtb0U0MTB1SkdRd0VHbFNuYmZOK2wKZzFQYk41MWRsWmNESG9iTFVwYzgyS1RPbVR5VnIwbTc4M29SaVI3d09GKzFDdnBEbGZlMVRsQUF1UXB5KzRuYgpqMmNXVVY1emhDSDZiYmdFcmtJc1VyRWRsSjVCdGRaMy9UZURmSXJrYXRLUzFDTlU2MGVnSXA5WnBZcUsxU0VHCkNoYVJTVmtkRzlnTHl1THlmZWxUWEpPMVQ5NFJSbnZpZDN3T1BSajlaUDRLc1lhVkpFSUxTMVljQ2Y5R1RrcmYKMGZCWFhCOCs4Sll5aVlJaWJ6VE9QS1lZSXJlQ2dJQ3NDVU1WNmIzaVBWenlZU3djOXlyME9wNVhBbDNONS9RaQo1dnZBYU9JK0ZUelp5YU9POWtTOWQ1Q3ZaWTY0VStXQ0dDRWlQNUhrNkhKbUpPN0JQRTR3VzVLdmZYSHNiQ0ZMCklkVjZGOGc5QVZlQmdhWnJRbmJZUzZyRGF5WFRsVklBdUtEbm45aFUvWXh5bzRVOGxRdUEvR0xjcHEwQ0F3RUEKQVFLQ0FnQktSUTQrdEhGNVY0UUNUOE10V1I0bVU1WXBQSEJmOERjVzQ0V1hkUEV0c0V2Qks4MlFxdXVPWVhtawo4VzFuYTI0clNvWmRpTWlhbUE1elNWTnJoMzBBYzdSNnQzZGZWcWJ5bGFCcytnd25IRnk0QldDYUphUytWU0d1Cmp1UnNMRGUrV3ZGdnE0MVcvUVBDa1lOdUpGaVJQaFJQVzdlTG9teTMyaTE5dTlydHRRK0dab1lvamp3VUNhbXoKM2MxZnp1dnBRbnZKTnFzNU9lZEtuRTRIWXp0VDdETGNDakVCT2EzRVcvdnZDa3dyWWE2MWZnYjNSUjM1U0dOVQpOd2l1VWdYTVc3ck42QzkxdDN0NyszQ0M1RVNiOVRDeXRaTmswKzU2SDV5a2hCcjNsWGZibk5sVTJyV0VnWVo1CkFKT0RsbUZEc1hlM0UzdFpsR1hrQkIxdTlkWktidWpEQTNxdnFLWG5ZNnNzcENzdDRRbzBHNm5KbmF2bVRMcmUKbFFscGF1M3kxcWZ5Z1VFOXJsa0xHdmVHRGtHV0tCVlBRQ2FwcTl5bmNYOGlrWUQ1MUV3VUZISG5ReGd1dVJueApXK1BEOHBGVUcvSTVrZzZzZUFtTkxrVGlPNU5tVFZjMm1heXJRMWVqcjdaWGk1Q2xZL0xMaFk3L2t3aFBnL2FTCnZVSnNrUHRCR3BkVWJNM1lxdnAvMjh3K2hDODltVm00eE5oVXRBbWVnem1HdW93YStwM1l1MUwyTkdabzM5Y08KMVZ4VTNKMDBVVGVka2F0NHM0Tlc2NGNPZ0tOMU9GQlJGNk80RzNmVWZKdm9JRlhROWwwemdLS3N0LzBSL0p0YQpBWjZYUHpCSmlWeEswc3c1d2lhRFk0ZHZIWXlNc3o0NE56UzVySDhKV0huUFRtcGd4UUtDQVFFQTdVcm9KZlhKCndwWTltTUFHMjNsOUM3SGJhWENPMDFVSEdiNWtKbHhoNFlmN24zZkwwTTlEbWxCTGlYeFZFSGVMelhVZnk1ZGEKWitOWGsySXFFS3FpVmEvN2k3eDcwNVhnZUZUT3lIYW4ra2Q4SWpQbTNpNmlFcy9HVnU3VWU5UmhOMU9Mck01MQpkeng3MnVwTWRsbXFLNXlLV0RqcDFqV3RVVjdFUHMwNTFvSFVlRzI0UnRjSXZRNjBBVFB5NW9BSFRwK25FQ2NUCndIVjcrbXdCQlNEWHh6aFNSNk5XeEc4dmY0MXFlT05aZ2JTOTdVYnl5b3k2REptSWtiTjRQRlluSXd4YUIzaFcKaDd4NFE1eXlTUGRuaFBnaW1QMXB0T1pFaWIzS2JNbHN1QlgvMG85c29TTk1DbjQ3VVB5ejJtQjdsTmlvek5PRQpnSXgrUElwNHhlK0Nmd0tDQVFFQTZJYlBKczdmeC9kWWpxRjY3WXFyS2hkQkkzSWtCK1cvTS9sRjc4NHNiNnB3CjV4N0JHMUxsbktGVk56amgwakNQN0Z3K3NFTmhxOTFHeHNyZ1RYQmpqeHpqazFaMW1EazBQZkgwbU5CMWxBZlUKVnhYM093YmsyeU1tMTNnOU5jZ0FmUDZLWC8zZFo1QlozK25KVzZpK2hVdXBDRU9GMUkyQkdERjNmVWRYUmJKSgpuaEl5WGNFL3lTWjlTa3A2cmhnRE1GZUY5VnZYVHBYTlhhQktzVGtZcmpqRjhMNkhVeGhDQW1SU3MvYzZvSXJZCnNnUHY2eEZKcUF6SnIyYm1jOFJQS21TdjFpdFVVc1gzRHpzK2FPZXJydFRSODRSZ2tuWDlQSGJHQzRlbjh4YU4KaXR3ckt6eHRRS3ZGVlJYUERmaU9IQjNsdFQwT0hTZDFZOUJObFUvbzB3S0NBUUVBaHVGQk8vS09FTEZkcWVuYworL3YrZkJ0STRKSStYUm5EdzNwWmF3U3dEb1pCSE0vM1ptV3B3NWxJbG9tNXdIWnpYUUhxWk10UGRDWGhyY0RxCnNEYU50NjhraUxWR25XcGdBWVlUVkJjK1BDRk9DaEwrYytTRjg3TnV4aE5UYkYrNE1yNm1jaitZdllILzFOdkIKUXJTTTZlVTlMaENMdWxzZ2ZWUWtzSjN1OW1NdDVwWlhYTXoyQnFESTZMWWlwNnEyZkpaN1c4OGFoeGRBdFlPVwp3TmQrVDV0UUNiQnFyWldWcGljNEVpY0l4WlY3TDloWVFaSGtYeTBXVjl0dnlMd2YydWcyZEhDT252RWVXekJDCmx2OHFOSWJuQTVkbjhvL0EvWnFINlhaRStnNW5MOFNldHFsZG04bE01aWYrQTI4OFQ4c25oK1hqTno2a3NyenoKRVcrbStRS0NBUUFHOVNtenBwTUpuN3dWb0gxV0tFVVE0RnRCblVPNHZNWW8zdmVad2xpUUN0Q1FDZHFMWDhLaApHaTY3bFVja2kvRnlpQndVR0NBUERYTDF0ZEphWHRlTHk3aC9peUcvcVU2SDMvcUtyQW9vb01kWXg3NTdGS3k2ClplWGVvcWxxTjQ3VUxxV2pVNnhSVWY5dWRNZGlwN3p6cmh6anMybUl2NmN5T3lDeExmWk5qcFVuVnJJTkhpQXoKZTZSYUdicHNCU25yUTJNdHdVN0MramFINjZqd2ZwM2ZjTEZ6ajYvcTY1bm1DbXh6R0IyMytnK2IzQVJNeTFxaAozYWdYU0lQeXlOZjVrOE96Szk2OUQxRmlNa3FleHZmYkptRVY0VXNtZHNOYUVNL0NQby9tOVRETkMrTjZ5cmNXCkxVMmRTeWJENjBFTlZGT3dSYUJyZk9mRlVkRlFlM0NqQW9JQkFRRFBqa2JlVDRBZUc2b201amdud0dEUkhxMkcKelZZZzdqY2JPVS96cG1mMWlYK0ZNUzNzTlcxemI3em8xMnBtc0xyUW9VZTI3bktPc3k3cnJRZmtUbFQxRkZPWgpwMTlGL0dKc2RGd0FBSitucWY1TDhqM3NhQWNIL3pKd0grU1FpZm9EdlIzUmw3Q0NKbDVTYjd3QTVLVkdwRmJ5CjluOS9wNE5jQXhyeFYvKzZJKzRORUNmU2pYbDFmdzloU0Q5WFFqMkluUVhYSkRHZlpJNStHVGYrM1JPakJiTjQKMjZqMG54ZFMwdEZLMmtWM0ZNVXhVNDBvVG9JMDFTRjBkeVpWajFtTGFBLzBMNFI4OXVxSUxRTDBTUWEzUDJKUApQcE5GZlg3N3AyeXB1ZEY2cE1FYklvdDJsSldtWTA3OERnNFdLWXVoaWdTV253UU4rY1VieU1xbC95UTIKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K",
		},
		{
			Name:         "registry3:443",
			Capabilities: []string{},
			SkipVerify:   false,
			Server:       "https://registry2",
			CACert:       "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUpLVENDQlJHZ0F3SUJBZ0lVREZGMS9YbjZ5MzhjdEc4czVqOGFBdG1mTTNJd0RRWUpLb1pJaHZjTkFRRUwKQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmxaMmx6ZEhKNUxXTnNhV1Z1ZEMxallUQWVGdzB5TWpBeQpNRGt3T0RRNU5UUmFGdzB5TXpBeU1Ea3dPRFE1TlRSYU1DUXhJakFnQmdOVkJBTU1HV1J2WTJ0bGNpMXlaV2RwCmMzUnllUzFqYkdsbGJuUXRZMkV3Z2dRaU1BMEdDU3FHU0liM0RRRUJBUVVBQTRJRUR3QXdnZ1FLQW9JRUFRRHAKZ05oYmcvZis3RUh5VEhqbXpyZ1VMdHlMeWNHajhIaTJubjljZ0k2YWJWS0tHVkcxOXdZYnVkcUJLRUpYRks4egpXNUJ5cXRTcGNXdWxjNVhnamQwREo1cDZFK0xIVno0Z0JhRnpmVkdLTmNWY04xREhUcXlMdW90cEZxMGVlTjBzCktxc0EyWTdpaFRtbjVMM0lqbUI3NXp2SjB1L1FnNU1MZE1WZlFDOVh4QlJPcmx4MWtDWjlYcDMwOTRCVjBYMTcKUmhZK2tTS25xNkxBdG1UYU4wTzNCRHVFWXR4dTllRWJ5UVVHcS9pbk13M1N2c0NIN0NxSTJCaUZ2d3dkNjNyagpGWU5pUEEzWk1jYTlERy9lN3hLZWU3TGNhSEZ6M29Sa2F4RnJyc1RLMU9ZSDNVWjl0djVvbDEwQ0hzK1dPeGs4ClFPQTd0eHNTV3FpZWNHWHB5YXZFVXFtb3BLQnhxMngxUFFBa08yQUNQa2prTmlaSDNRTGpUdWEwRTNwZnhES3oKbTFxNldVYXZyV3ZzOVNqeW1QZ00wcE9ES3VWdGJFMHo0RnRVM3EwRnlYWEpuclc0cko3MDMrMTBaVGpsUWtKRgoxTTZDeHZjaXVLcjdITGpTa05nKy9aa3dHcFFOZXFiQ1E1Q2NaZ1lNdXlkM015MHU5VFhIU09STUw0VVYvSUxnCi9aUDVYcHVBUmtXaitNZFNtSUFDdzE5U3kvOGxPTURwQzF2Z1V1cUJ5MVl1N3l3K0xDTkJxKzhBVUh5VXRjd28KRHNvdW1ia3JmNldxY2FXMEFOSHNDemxNOEthb203aE56cVZnRiswa0FhUC8zRHI5cjFYbEdDVmpyZVY2UjFJdQphUG5SSFpZaWFXaHJ3WFpqZ0Y4UVp4ajdhM3FmRTRmVkhiMkdnYnVwZDA3eEExNW0vaEl1RDJieTd4ckttZ3BNCndvUWF1VEtEKzBIZHFVd1h3cVYwMGo0K0QzNkhZZjhESHllZVFGQlpZNmQ3YktIN3NFVFlvQ05ScUpoYUhSelIKaHY3cUlTOERiNTUyQTFpbmhaWTVUOXM2SzlyL2xyd3pWT0k0S0NyUGdQbVVWbWtCRWl5SkRqM28xK3dVc0lLNApNeXVjUlF4aWJjVWlzSlNXVkdMK2ZvU1MxZUx1azQyN0JiYWNaWkRwcVkwTWJrR3dLQUhIdEgvZXhXV3N5TEtWClRRbkVKNU5PeWdJaStpTFVGMHNIR1VJeklmYTdWZHRFWVJHY0phSTg1U0pLd01BdU4xV3R2MzlRWmVnNXVNdEgKbTFIOUZHOGtOemk3SUU1aDNhSCtKSEhRMjJuUTFwb0tobmM1Z3Q3UXhrdWE0RXk4d2FGbnZuaU5hc2ZpdFJIMApObnlOQlZVdDllZTd6NUpRU3hXM09RNkIzZS9jK1dMSE5nMlJXYi9VT1JWZzFRTzVueEQzTlU3M0YveGFHVFltCnRLLy9PK0ZxaENVRnQwQXlEUk15QUhTdVhKR2NFWjB3bXNQRUxBTEFQenlWS1Vqb1VUYXFid0ZBOU9zT3dDR2gKSSt2S3JnRDRqY041a1hZdFEvUDlNenpPbEpwbmNLVDJNdDNxS0JsclZqTGdJVW13Q1V4RGk4SWRzREJpeEVGdQpXQkthQWI1QW9uM0J3RzNsTVdmQXdvZGJ1MUpLeko1dEtaQmVONUJ3WTlTekthNWI4djE0bkRJbnU1Nkx0dFBQCjJoQlQvQW9sMGRPcmVvK3lCMndzSTBjOWdiR3RLQmZjeVQ2YlRQOGRSSDNMOXlzOGRYdlFkZU9FOUNHR0FBbnIKMTlPWXVTcEdXdmNvYnhnQjVnbkpBZ01CQUFHalV6QlJNQjBHQTFVZERnUVdCQlNBN3VsRE5CcmR3aUd3aGtPTQprZ0dLQkFNay9EQWZCZ05WSFNNRUdEQVdnQlNBN3VsRE5CcmR3aUd3aGtPTWtnR0tCQU1rL0RBUEJnTlZIUk1CCkFmOEVCVEFEQVFIL01BMEdDU3FHU0liM0RRRUJDd1VBQTRJRUFRQ0xYRWRuQThJYVVGV1M2RUVkZnJvaytWSkwKZVVhaCtJSHpEcElsWjBITkJuaERiQ3M3ZTI3bC9SUm82aG40cGJEc0ZwSHk5WTArajJZSDBnOVBGbERuRDVDZgpvUGhEcFM5VkJqUzZUMjZrUFdEeFdaMHA0am9sMzZKYjZrcnU3Vy9qd2d1Q3hGczIwRlhWWFphSkU1UkVjOXNXCjhOeXBtMi9XcDJUaVVxMmN1UjFHaDZUQzYzbEZTZHhuZGRlaVZZYi80eVFMK1RZY0RyK2lxWWtoaWlibVRyWEkKWU9nVlVqbHhVdTdaQktyTjkvMzhMbnBKZDUwWTV0UkYxWDVGNGwxL1N3ck53bkZwOThWL25qVUhxU0M3SzA3bApJMmhRTTZCR1dCUm94S1ZyWmdhUThjTXNEQjg2QytEV0JYYWJZNHY5bmVOQ2xDQU5YcjlYb2QrYmlLM3oyWnNmCm5LalJjLzRQQm8vc1Q0SXM2U01CZGViTnhJbFZXMzRyUm1QWHd5QW5oSHRucHlYK3l2aldTb2FjVFpQTEJmd0gKUGp3elpYdi9zOXpYZENXbXVHaFRKVXBwaWxra1d1VkRrMEoraWo1Vnp5YzZnSnN4Q29Kc1h4dmpoRXJtaVRUeQpZdWw4WXNzdG5JQzg4dDB0aE5GNHlXaElQNjVEQXEwb1Mwbkh3S1RsS1BCSFZmZEhybFM2SVRaZzJ1ZVROV0RVCjgxL3BVVkV1U0xPeWZ4NklPcnVUb1dTMnppQVgzTlUrTUhPT3FYbEx2ekJGR1VKMytsc1pScVlCNnhiUFU3Q3MKVERCUUxOWXhzREYxYlJ0T1U1MU1VUnl4QkR5MENSQUZ3NzlQeUFlT3gzRDlVaXVpclRYcE9XQ2Q4YmhMZjBSMApia3krSDZjTDkwRmh0NWVHRHZPTmUvbC8zNlM0RndTREpndmVoQzFabFFDM2VaVmRuUTFSa2RDWXZVQy9MMVFjClNKU3ByM0FIYyt5d2JySWZPcVRrUEY5L2MxOXFFSlFwSnNsZldMRThYbFlxYXRueThBR2U1eS8vdlIralY2WFEKNEhPdHNsc3F5eEdSR3daSGkyK1YzRDFtVFRzQU4raGtOcWxzU3R6VGFBSmVLbGwzenJvNGlhUENKKzh4bHlqWApEZSt1ZWk3THBPa281cU1vb0N6TENUSWlVN3FtODgvY05XYWtTL1ZVOUJLSUZsSnFqM2ZBSlRtSHhDUnBKU2c5CkltTHZCbjllSnZISmFUR1B2TWpvVENrV0YrTVlVdjVTTXlEbHhiQkN1ZUhORUxldzl2QVpXSXRyMnlabFNDNGIKaUllaFZ2V3EwZk50YldNNnAwQytVejkvL2ozU21QUmpQeHlvTEhHNjRjVXRTQWNRYlJRaWFqdElSa3hIV0FORApYa2NjblhaeFRzZHhETDRkRTVnVzRBckNsUmFFQ3d0NFhBQnhPeStuRk05QXFNemNnWUt5cEcxZ2h1ZWIya0dMClJ6ZENyMlN0UEZMRUhiYUxDUmVRS09XV2JYZTBsb2s4UWZOQVo2c1BZYTZ6cjQ3ZU4yQnRYZ2wwVkRmV2V2aFkKR3MrOXNpTDJqdng3TEt1SU9WYWZRQWlPMlVNKytVZHBsYUZUWVgwb3dNb0N5U3NZWUUveis4ZzZPdlFLOG9aNApUUU54RDBxd1RFL3hZeStkaytiSG4xT3M2YnRoVmszMk9HU2ttMmNBWm1wM0M4SU9nYlpmREtCUldQbU5QaXBnCmZNRWdvWTZNSHFsSnFOcFBBS1ZtTnFBKzdnVGpVaDlORUkyUnVDcnppTkRJZDhHSzhrd3huSTRoSm1ROQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
			ClientCert:   "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUd1ekNDQXFNQ0FRRXdEUVlKS29aSWh2Y05BUUVMQlFBd0pERWlNQ0FHQTFVRUF3d1paRzlqYTJWeUxYSmwKWjJsemRISjVMV05zYVdWdWRDMWpZVEFlRncweU1qQXlNRGt3T1RBeE1EUmFGdzB5TXpBeU1Ea3dPVEF4TURSYQpNQ014SVRBZkJnTlZCQU1NR0dSdlkydGxjaTF5WldkcGMzUnllUzFqYkdsbGJuUXRNakNDQWlJd0RRWUpLb1pJCmh2Y05BUUVCQlFBRGdnSVBBRENDQWdvQ2dnSUJBTmVJMTV0MU5GdTk1MnZ6STZRNk56N0RwRHUvVUFaYTFkcWsKd3lYNFhlUStYVGlNMHRxdEdrZTVGUittbThuUzFUY0ZjdDR5cHBCRTJBSzMxUHAzamhoNGxIQVc0SUdwTnhLaApxWWsvOVg1TXZoWHlrQWVCMTBJZkNidnNOL0dXZ2JDY1Y5eFRXbnA2VFFNRXVpSHY5TkZ0aU1qZm41ZDFuVlcrCmVJQVE5MUt5R2hiYWxobXhGaEwvQXNXZ0ltOHA3YlN3TjlDWklaQ0k4YnZkeGN3MWZiMS9kWVhKbnpUN0RyUUQKSWMzYU1tc3c4RGpxTk1Xek9XdlNCejA2eVlBdkJkMXhVT3hkc2lTOU84UzVNSm5jU1R1ZEVUSU5KcUJPTmRMaQpSa01CQnBVcDIzemZwWU5UMnplZFhaV1hBeDZHeTFLWFBOaWt6cGs4bGE5SnUvTjZFWWtlOERoZnRRcjZRNVgzCnRVNVFBTGtLY3Z1SjI0OW5GbEZlYzRRaCttMjRCSzVDTEZLeEhaU2VRYlhXZC8wM2czeUs1R3JTa3RRalZPdEgKb0NLZldhV0tpdFVoQmdvV2tVbFpIUnZZQzhyaThuM3BVMXlUdFUvZUVVWjc0bmQ4RGowWS9XVCtDckdHbFNSQwpDMHRXSEFuL1JrNUszOUh3VjF3ZlB2Q1dNb21DSW04MHpqeW1HQ0szZ29DQXJBbERGZW05NGoxYzhtRXNIUGNxCjlEcWVWd0pkemVmMEl1Yjd3R2ppUGhVODJjbWpqdlpFdlhlUXIyV091RlBsZ2hnaElqK1I1T2h5WmlUdXdUeE8KTUZ1U3IzMXg3R3doU3lIVmVoZklQUUZYZ1lHbWEwSjIyRXVxdzJzbDA1VlNBTGlnNTUvWVZQMk1jcU9GUEpVTApnUHhpM0thdEFnTUJBQUV3RFFZSktvWklodmNOQVFFTEJRQURnZ1FCQU9OZG9uTnQwUXJaT1gyL1ZMbFNBMFVzCndPRFMwNkNrL2NRZEorSFBYemRjc2ZCQ2VZcElNTGNhVWhETlByUUJsSjZZNjB5QUd4UVlFMjFUcGY3a2xnZloKNXF1UFRxYjQ5cWt1a3ZFOXArTlRnbUtKeVRTbVNzZCtXN3Rha0t2RVAvRFVvSlU3RHRiQVNVZTl1eDZhbndKNwpybFJ1ZGdPZHQ5aXBtK1k0blpWOEE3L29SVEpKM1lDTjhiWDlVUXlwNHArQXl0Sm1kaXRQSFE0bUtPRlI2VnVwCmMxTjA5bDlYeEdLR2lVVEtyVU1BZUwzVVUwbHYrM0xxZnlLQkErUkxGZkVqa1dsbXdNUlM2SFhvUkprQUx3N20KakRUTy9MYWpQODNoaS9Ibmp6di9CKzlOV1Zta3FsT1h1UCtVUHZEdXNzSTVJQnMvZ1ZKWGZsK2pwcFhxSHpZeQo0UlVLSlc5UCtVUHBJMlovN0RXcm1VMzZDaHFudG9DMXEyVHMwcGJWOVdCREt5cTJpS3dBaFV3akhRbzkrTDcxCiswNW9GbmNCWDA0V3RkZlVoME9lNXZxVjk0OTBvaVhRMS81b0FDL2dIZENjcFlaQnRsalJaN2hIMGlNMHVhNy8KRlpkL1NDZGs4VGhPanlzSEZVc1FZZldPd0RpOEZteS81MStqTFozQnZ4N2hGTk9TL2FnSzVBNzBObDQwcmxSagpvTVhBTFphcldrYStMaCt2YkE5M0JCemZGa0xScXZhaHFwSWZ0eE9yNzBTbDZ4QzhTQXBkK1p3TGNYM0k0c0V5CmZrbFg0RDlWRVFsZHZEMkdjMFNLclY3MVRqQzhUdmZUMElhQWEvN1dZK3dTSC9lRUZYT0JpNC93azFNaGRrVGUKUUN2RnBCODl0dGsyM1YxbWdaeWJwbmQ5cnZ3K2N6MzJ4VTJuN0YvaWlZN3JXdThYblVoVmdBVzBKdTZXdmd6dgpNdTdpSmpCTzQ4cnNYZDRuREY1eDVtaHZEUG5RdFFPaER1enN5anVyY3ZGUFVCcDVhSFhkRDJFQTYxb0hSWUtRCkR6ejZyaU5kYnVsbGpTWmVSOHk4Qnk4L3hWc1E2elFIamtnZkxMNldId29nQUNjNlhYK3ZOVGt4eTRPQ2E3Q1UKcGtiaUlmSmNtRCtiNEJUdEY5T1Y4VU05a0NDLzNiWXhnYjZtNDgyMHB0SDk3QVp6a0hrQUREa1VwdFUxamIrZQpRenkrNzhKODM1V1BQbVc5Mk5WVE9QZ0VVcGZyV1lIYUVNQ0VvYTllbi93RHRQSnVMamMxUEdDYzlCS3BoczRsCjlqckc4WHpyVkJpcFptQ1kzZ20zL2xqY1I5WU9iOHlOZ3p1RnFjYlRnT01jTjdWd1kyU0tubVJMWkJ5ejc3L0EKd0tjN2NRK3VyS1BjSWU5UkNMOEVHSzhtQUE1STVhczJab0Jkck0zRFlwbndLOVBjbHJBWFFWMEwrWktzakdUZApKSUhHMkpDdUxHaWw5d1VlcFRRMkNhanhFMnJlSkNBNEJaZmJubEFCY0h0OExYUjVucm5vY2FMaHozWjBYUC9HCnlka2xYVFhvZmJKQU5ndVFZZHZSOElpN2JCSy94VWVURG1EUGFOeVBRelpkUGcxSGpDbjRyOFNYU1FlYVV5NlYKUkl6Y0Q2NCttU3FhV0ZIU0dhUTVaT1JiTk5wMkYyWHdjL0FvdEpJQzU2SHh4YU0xYUdHODQ0LzM4ZnYySkl2agpNWWwyLzFETEoyMzk1aVF4ZW04YXNmVHg2S2RoL2FVSjFMZE1wL2kxeDJrOTZDQ2FacE9wdU5GbDJvaGxBcjQ9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K",
			ClientKey:    "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBMTRqWG0zVTBXNzNuYS9NanBEbzNQc09rTzc5UUJsclYycVRESmZoZDVENWRPSXpTCjJxMGFSN2tWSDZhYnlkTFZOd1Z5M2pLbWtFVFlBcmZVK25lT0dIaVVjQmJnZ2FrM0VxR3BpVC8xZmt5K0ZmS1EKQjRIWFFoOEp1K3czOFphQnNKeFgzRk5hZW5wTkF3UzZJZS8wMFcySXlOK2ZsM1dkVmI1NGdCRDNVcklhRnRxVwpHYkVXRXY4Q3hhQWlieW50dExBMzBKa2hrSWp4dTkzRnpEVjl2WDkxaGNtZk5Qc090QU1oemRveWF6RHdPT28wCnhiTTVhOUlIUFRySmdDOEYzWEZRN0YyeUpMMDd4TGt3bWR4Sk81MFJNZzBtb0U0MTB1SkdRd0VHbFNuYmZOK2wKZzFQYk41MWRsWmNESG9iTFVwYzgyS1RPbVR5VnIwbTc4M29SaVI3d09GKzFDdnBEbGZlMVRsQUF1UXB5KzRuYgpqMmNXVVY1emhDSDZiYmdFcmtJc1VyRWRsSjVCdGRaMy9UZURmSXJrYXRLUzFDTlU2MGVnSXA5WnBZcUsxU0VHCkNoYVJTVmtkRzlnTHl1THlmZWxUWEpPMVQ5NFJSbnZpZDN3T1BSajlaUDRLc1lhVkpFSUxTMVljQ2Y5R1RrcmYKMGZCWFhCOCs4Sll5aVlJaWJ6VE9QS1lZSXJlQ2dJQ3NDVU1WNmIzaVBWenlZU3djOXlyME9wNVhBbDNONS9RaQo1dnZBYU9JK0ZUelp5YU9POWtTOWQ1Q3ZaWTY0VStXQ0dDRWlQNUhrNkhKbUpPN0JQRTR3VzVLdmZYSHNiQ0ZMCklkVjZGOGc5QVZlQmdhWnJRbmJZUzZyRGF5WFRsVklBdUtEbm45aFUvWXh5bzRVOGxRdUEvR0xjcHEwQ0F3RUEKQVFLQ0FnQktSUTQrdEhGNVY0UUNUOE10V1I0bVU1WXBQSEJmOERjVzQ0V1hkUEV0c0V2Qks4MlFxdXVPWVhtawo4VzFuYTI0clNvWmRpTWlhbUE1elNWTnJoMzBBYzdSNnQzZGZWcWJ5bGFCcytnd25IRnk0QldDYUphUytWU0d1Cmp1UnNMRGUrV3ZGdnE0MVcvUVBDa1lOdUpGaVJQaFJQVzdlTG9teTMyaTE5dTlydHRRK0dab1lvamp3VUNhbXoKM2MxZnp1dnBRbnZKTnFzNU9lZEtuRTRIWXp0VDdETGNDakVCT2EzRVcvdnZDa3dyWWE2MWZnYjNSUjM1U0dOVQpOd2l1VWdYTVc3ck42QzkxdDN0NyszQ0M1RVNiOVRDeXRaTmswKzU2SDV5a2hCcjNsWGZibk5sVTJyV0VnWVo1CkFKT0RsbUZEc1hlM0UzdFpsR1hrQkIxdTlkWktidWpEQTNxdnFLWG5ZNnNzcENzdDRRbzBHNm5KbmF2bVRMcmUKbFFscGF1M3kxcWZ5Z1VFOXJsa0xHdmVHRGtHV0tCVlBRQ2FwcTl5bmNYOGlrWUQ1MUV3VUZISG5ReGd1dVJueApXK1BEOHBGVUcvSTVrZzZzZUFtTkxrVGlPNU5tVFZjMm1heXJRMWVqcjdaWGk1Q2xZL0xMaFk3L2t3aFBnL2FTCnZVSnNrUHRCR3BkVWJNM1lxdnAvMjh3K2hDODltVm00eE5oVXRBbWVnem1HdW93YStwM1l1MUwyTkdabzM5Y08KMVZ4VTNKMDBVVGVka2F0NHM0Tlc2NGNPZ0tOMU9GQlJGNk80RzNmVWZKdm9JRlhROWwwemdLS3N0LzBSL0p0YQpBWjZYUHpCSmlWeEswc3c1d2lhRFk0ZHZIWXlNc3o0NE56UzVySDhKV0huUFRtcGd4UUtDQVFFQTdVcm9KZlhKCndwWTltTUFHMjNsOUM3SGJhWENPMDFVSEdiNWtKbHhoNFlmN24zZkwwTTlEbWxCTGlYeFZFSGVMelhVZnk1ZGEKWitOWGsySXFFS3FpVmEvN2k3eDcwNVhnZUZUT3lIYW4ra2Q4SWpQbTNpNmlFcy9HVnU3VWU5UmhOMU9Mck01MQpkeng3MnVwTWRsbXFLNXlLV0RqcDFqV3RVVjdFUHMwNTFvSFVlRzI0UnRjSXZRNjBBVFB5NW9BSFRwK25FQ2NUCndIVjcrbXdCQlNEWHh6aFNSNk5XeEc4dmY0MXFlT05aZ2JTOTdVYnl5b3k2REptSWtiTjRQRlluSXd4YUIzaFcKaDd4NFE1eXlTUGRuaFBnaW1QMXB0T1pFaWIzS2JNbHN1QlgvMG85c29TTk1DbjQ3VVB5ejJtQjdsTmlvek5PRQpnSXgrUElwNHhlK0Nmd0tDQVFFQTZJYlBKczdmeC9kWWpxRjY3WXFyS2hkQkkzSWtCK1cvTS9sRjc4NHNiNnB3CjV4N0JHMUxsbktGVk56amgwakNQN0Z3K3NFTmhxOTFHeHNyZ1RYQmpqeHpqazFaMW1EazBQZkgwbU5CMWxBZlUKVnhYM093YmsyeU1tMTNnOU5jZ0FmUDZLWC8zZFo1QlozK25KVzZpK2hVdXBDRU9GMUkyQkdERjNmVWRYUmJKSgpuaEl5WGNFL3lTWjlTa3A2cmhnRE1GZUY5VnZYVHBYTlhhQktzVGtZcmpqRjhMNkhVeGhDQW1SU3MvYzZvSXJZCnNnUHY2eEZKcUF6SnIyYm1jOFJQS21TdjFpdFVVc1gzRHpzK2FPZXJydFRSODRSZ2tuWDlQSGJHQzRlbjh4YU4KaXR3ckt6eHRRS3ZGVlJYUERmaU9IQjNsdFQwT0hTZDFZOUJObFUvbzB3S0NBUUVBaHVGQk8vS09FTEZkcWVuYworL3YrZkJ0STRKSStYUm5EdzNwWmF3U3dEb1pCSE0vM1ptV3B3NWxJbG9tNXdIWnpYUUhxWk10UGRDWGhyY0RxCnNEYU50NjhraUxWR25XcGdBWVlUVkJjK1BDRk9DaEwrYytTRjg3TnV4aE5UYkYrNE1yNm1jaitZdllILzFOdkIKUXJTTTZlVTlMaENMdWxzZ2ZWUWtzSjN1OW1NdDVwWlhYTXoyQnFESTZMWWlwNnEyZkpaN1c4OGFoeGRBdFlPVwp3TmQrVDV0UUNiQnFyWldWcGljNEVpY0l4WlY3TDloWVFaSGtYeTBXVjl0dnlMd2YydWcyZEhDT252RWVXekJDCmx2OHFOSWJuQTVkbjhvL0EvWnFINlhaRStnNW5MOFNldHFsZG04bE01aWYrQTI4OFQ4c25oK1hqTno2a3NyenoKRVcrbStRS0NBUUFHOVNtenBwTUpuN3dWb0gxV0tFVVE0RnRCblVPNHZNWW8zdmVad2xpUUN0Q1FDZHFMWDhLaApHaTY3bFVja2kvRnlpQndVR0NBUERYTDF0ZEphWHRlTHk3aC9peUcvcVU2SDMvcUtyQW9vb01kWXg3NTdGS3k2ClplWGVvcWxxTjQ3VUxxV2pVNnhSVWY5dWRNZGlwN3p6cmh6anMybUl2NmN5T3lDeExmWk5qcFVuVnJJTkhpQXoKZTZSYUdicHNCU25yUTJNdHdVN0MramFINjZqd2ZwM2ZjTEZ6ajYvcTY1bm1DbXh6R0IyMytnK2IzQVJNeTFxaAozYWdYU0lQeXlOZjVrOE96Szk2OUQxRmlNa3FleHZmYkptRVY0VXNtZHNOYUVNL0NQby9tOVRETkMrTjZ5cmNXCkxVMmRTeWJENjBFTlZGT3dSYUJyZk9mRlVkRlFlM0NqQW9JQkFRRFBqa2JlVDRBZUc2b201amdud0dEUkhxMkcKelZZZzdqY2JPVS96cG1mMWlYK0ZNUzNzTlcxemI3em8xMnBtc0xyUW9VZTI3bktPc3k3cnJRZmtUbFQxRkZPWgpwMTlGL0dKc2RGd0FBSitucWY1TDhqM3NhQWNIL3pKd0grU1FpZm9EdlIzUmw3Q0NKbDVTYjd3QTVLVkdwRmJ5CjluOS9wNE5jQXhyeFYvKzZJKzRORUNmU2pYbDFmdzloU0Q5WFFqMkluUVhYSkRHZlpJNStHVGYrM1JPakJiTjQKMjZqMG54ZFMwdEZLMmtWM0ZNVXhVNDBvVG9JMDFTRjBkeVpWajFtTGFBLzBMNFI4OXVxSUxRTDBTUWEzUDJKUApQcE5GZlg3N3AyeXB1ZEY2cE1FYklvdDJsSldtWTA3OERnNFdLWXVoaWdTV253UU4rY1VieU1xbC95UTIKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K",
		},
	},
}

var confTmpl = template.Must(template.New("containerd").Parse(`
# This is a placeholder configuration for k0s managed containerD.
# If you wish to customize the config replace this file with your custom configuration.
# For reference see https://github.com/containerd/containerd/blob/main/docs/man/containerd-config.toml.5.md
version = 2

{{if .Registries }}
[plugins."io.containerd.grpc.v1.cri".registry]
  config_path = "/var/lib/k0s/certs.d"
{{ end }}
`))

const confPath = "/etc/k0s/containerd.toml"

// Points to the directory where hosts.toml files are located
const confPathRegistry = "/var/lib/k0s/certs.d"

// ContainerD implement the component interface to manage containerd as k0s component
type ContainerD struct {
	ClusterConfig *v1beta1.ClusterConfig
	supervisor    supervisor.Supervisor
	LogLevel      string
	K0sVars       constant.CfgVars

	OCIBundlePath string
}

// Init extracts the needed binaries
func (c *ContainerD) Init(ctx context.Context) error {
	g, _ := errgroup.WithContext(ctx)
	for _, bin := range []string{"containerd", "containerd-shim", "containerd-shim-runc-v1", "containerd-shim-runc-v2", "runc"} {
		b := bin
		g.Go(func() error {
			return assets.Stage(c.K0sVars.BinDir, b, constant.BinDirMode)
		})
	}

	return g.Wait()
}

// Run runs containerD
func (c *ContainerD) Run(_ context.Context) error {
	logrus.Info("Starting containerD")

	if err := c.setupConfig(); err != nil {
		return err
	}

	c.supervisor = supervisor.Supervisor{
		Name:    "containerd",
		BinPath: assets.BinPath("containerd", c.K0sVars.BinDir),
		RunDir:  c.K0sVars.RunDir,
		DataDir: c.K0sVars.DataDir,
		Args: []string{
			fmt.Sprintf("--root=%s", filepath.Join(c.K0sVars.DataDir, "containerd")),
			fmt.Sprintf("--state=%s", filepath.Join(c.K0sVars.RunDir, "containerd")),
			fmt.Sprintf("--address=%s", filepath.Join(c.K0sVars.RunDir, "containerd.sock")),
			fmt.Sprintf("--log-level=%s", c.LogLevel),
			fmt.Sprintf("--config=%s", confPath),
		},
	}

	return c.supervisor.Supervise()
}

func (c *ContainerD) setupConfig() error {
	logrus.Info("setting up containerd configuration...")

	// If the config file exists, use it as-is
	if fileutil.Exists(confPath) {
		return nil
	}

	if err := dirutil.Init(filepath.Dir(confPath), 0755); err != nil {
		return err
	}

	output, err := os.OpenFile(confPath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		return err
	}
	defer output.Close()

	var defaultRuntimeSpec v1beta.RuntimeSpec = v1beta.RuntimeSpec{
		Registries: nil,
	}

	// TODO: remove testConfigs sourcing...
	if c.ClusterConfig.Spec.Runtime != nil {
		defaultRuntimeSpec.Registries = append(defaultRuntimeSpec.Registries, c.ClusterConfig.Spec.Runtime.Registries...)
	} else {
		defaultRuntimeSpec.Registries = append(defaultRuntimeSpec.Registries, testConfigs.Registries...)
	}

	if err = confTmpl.Execute(output, &defaultRuntimeSpec); err != nil {
		return err
	}

	for _, registryHostConfig := range defaultRuntimeSpec.Registries {
		if err = writeRegistryHostConfig(confPathRegistry, *registryHostConfig); err != nil {
			return err
		}
	}

	return err
}

// Stop stops containerD
func (c *ContainerD) Stop() error {
	return c.supervisor.Stop()
}

// Reconcile detects changes in configuration and applies them to the component
func (c *ContainerD) Reconcile() error {
	logrus.Debug("reconcile method called for: ContainerD")
	return nil
}

// Health-check interface
func (c *ContainerD) Healthy() error { return nil }

var registryHostTemplate = template.Must(template.New("registryHostConfig").Parse(`
server = "{{.Server}}"

[host."{{.Server}}"]{{if .Capabilities }}{{printf "\n"}}  capabilities = [{{$first := true}}{{range $index, $element := .Capabilities}}{{if $first}}{{$first = false}}{{else}},{{end}}"{{ $element }}"{{end}}]{{else}}{{end}}{{if .SkipVerify }}{{printf "\n"}}  skip_verify = true{{else}}{{end}}
  ca = "ca.pem"
  client = [["client.cert", "client.key"]]
`))

// Write a registry host configuration file and directory
func writeRegistryHostConfig(rootPath string, regHost v1beta.RegistryConfig) error {

	// Create the directory for the registry host configuration
	regHostConfigDirPath := filepath.Join(rootPath, regHost.Name)
	if err := dirutil.Init(regHostConfigDirPath, 0755); err != nil {
		return err
	}

	// Render the hosts.toml file from the registry host configuration
	hostConfigDir := filepath.Join(rootPath, regHost.Name)
	hostConfigPath := filepath.Join(hostConfigDir, "hosts.toml")

	output, err := os.OpenFile(hostConfigPath, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0755)
	if err != nil {
		return err
	}
	defer output.Close()
	if err = registryHostTemplate.Execute(output, &regHost); err != nil {
		return err
	}

	// Write the registry certificates
	if err = writeRegistryCerts(hostConfigDir, regHost.CACert, regHost.ClientCert, regHost.ClientKey); err != nil {
		return err
	}

	return nil
}

// Decode and write certificates to a registry host configuration directory
func writeRegistryCerts(folderPath string, caBase64 string, clientBase64 string, keyBase64 string) error {

	ca, err := base64.StdEncoding.DecodeString(caBase64)
	if err != nil {
		return err
	}

	dest := filepath.Join(folderPath, "ca.pem")
	if err := ioutil.WriteFile(dest, []byte(ca), 0644); err != nil {
		return err
	}

	client, err := base64.StdEncoding.DecodeString(clientBase64)
	if err != nil {
		return err
	}

	dest = filepath.Join(folderPath, "client.cert")
	if err := ioutil.WriteFile(dest, []byte(client), 0644); err != nil {
		return err
	}

	key, err := base64.StdEncoding.DecodeString(keyBase64)
	if err != nil {
		return err
	}

	dest = filepath.Join(folderPath, "client.key")
	if err := ioutil.WriteFile(dest, []byte(key), 0644); err != nil {
		return err
	}

	return nil
}
